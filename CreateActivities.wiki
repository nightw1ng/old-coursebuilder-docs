#summary How to create a JavaScript activity file.

<h1>Create Activities</h1>

<font color=red><<TODO working here>></font>

<wiki:toc max_depth="3" />

Each unit may have  some number of activities. An activity is a set of questions related to a particular lesson within a unit:

<img src="https://www.corp.google.com/~vpg/no_crawl/cb/activity.png" height=529 width=420 />

== What happens on an activity page ==

An activity page lets students explore their understanding of the lesson content. Students answer questions on the activity page. For each question, clicking on *Check Answer* lets them know if their answer is correct. If the answer is incorrect, the response may contain guidance towards the correct answer. Optionally, the question can include a *Skip & Show Answer* button. If students click on that button, the correct answer appears, possibly with some explanation of why it's the correct answer.

== Page layout ==

Primarily an activity page contains the list of questions with text boxes for the course to display responses when the student submits an answer or requests a hint. Because of how you create an activity, you can include arbitrary HTML. For example, activities in the sample course always start with a box containing tips summarizing the main points of the corresponding lesson. 

An activity page has the same general look and feel as a [CreateLessons lesson] page. The app uses four files to render this page:
  * {{{views/base.html}}} is the same as for lessons. See [ModifyTemplate Modify Course Template] for information about this file.
  * {{{views/activity.html}}} defines the second two lines of the header, the vertical navigation, and the content area. Note that these are the same parts {{{views/unit.html}}} defines for lessons. You probably want to be consistent in these files.
  * {{{assets/js/activity-}}}_*{{{N.M}}}*_{{{.js}}} contains a !JavaScript array that fills in the actual content for the activity. Each activity has its own file.

== Writing activities ==

An activity represents explanatory text and one or more questions to present to the student.

 The activity for a particular lesson goes in a corresponding !JavaScript file. The !JavaScript filename is {{{activity-}}}_*{{[N.M}}}*_{{{.js}}}, where _*{{[N}}}*_ is the unit number and _*{{[M}}}*_ is the lesson number.


The format of the file is
{{{
var activity = [
  entry1,
  ...,
  entryN
]
}}}

The file contains a single array variable named {{{activity}}}. Each element in the array is arbitrary HTML, a question, or answer information. 

While it looks like the questions and their answers are connected to each other, the code does not enforce this. The code just renders the elements of the array one after the other. It is up to you to make sure they are in a logical order.

=== Arbitrary HTML ===

The first choice for an array element is a string that contains a set of complete HTML elements.  That is, if the string contains an open HTML tag (such as <em>), it must also have the corresponding close tag (such as </em>). 

The code simply renders the HTML you enter. For example, the sample activities all start with a 1-cell table that summarizes the major points of the associated lesson. With this HTML:

{{{
'<table border="2"><tr><td><b>Search Tips:</b><p><ul><li>In the last video, you
learned how to use color filtering within image search to narrow your image results to
images made up primarily of a certain color. You do this by clicking on the
appropriate colored box in the left panel. <li>Please note that you can’t filter
by color on iPad or Android tablets, but you can answer the questions below as
if you were using a laptop or desktop computer.</ul><p></tr></td></table><br/>',
}}}

The code displays the following:

  || *Search Tips:*<br><ul><li>In the last video, you learned how to use color filtering within image search to narrow your image results to images made up primarily of a certain color. You do this by clicking on the appropriate colored box in the left panel.</li><li>Please note that you can’t filter by color on iPad or Android tablets, but you can answer the questions below as if you were using a laptop or desktop computer.</li></ul> ||


=== Questions ===

As far as the code is concerned, there is no difference between a question and any other arbitrary HTML string. The difference is only in that you follow a question with answer information.

If you want to number your questions, you must include the numbers in your HTML. For example, with the following two HTML strings:

{{{
"<p><img src='assets/img/Image1.1a.png' height=450 width=785></p>", 
'<p><b>1.</b> You want to reread an introductory accounting textbook from
school, but you cannot remember the exact title. You recall that the cover is
yellow and has puzzle pieces on it. In the image above, where would you click to
filter the results in order to locate the book?</p>',
}}}

The code displays the following:

  <b><em>...the image...</em></b><br><b>1.</b> You want to reread an introductory accounting textbook from school, but you cannot remember the exact title. You recall that the cover is yellow and has puzzle pieces on it. In the image above, where would you click to filter the results in order to locate the book?

The line breaks in this string are for readability. You *cannot* have line breaks in the middle of a string.

=== Answer information ===

The final possibility for an entry in the {{{activity}}} array is a !JavaScript object that represents answer information. Depending on the answer type, this information can have a variety of forms. The object contains properties such as the type of question, a regular expression indicating the correct answer, a string to show in case of either correct or incorrect answers or to show when the student asks for help.

A question can be one of three types:
  * [#Single_multiple-choice_question A single multiple-choice question]
  * [#Group_of_multiple-choice_questions A group of multiple-choice questions]
  * [#Free_text Free text]

==== Single multiple-choice question ====

The code for a single multiple-choice question looks like the following example:

{{{
{questionType: 'multiple choice',
 choices: [
    ['[yarnbombing news article]', false, 
      'Try again. This is a risky approach, since many news articles do not call themselves \'news articles\' on the page.'],
     ['[yarnbombing] then click News in the left menu', true,
       'Correct! Using a collection of a specific type of media, like News, can help you get to the best pages faster.'],
     ['[i would like to find news articles about yarnbombing]', false,
      'Try again. We want to avoid including a lot of extra, confusing words into a query.'],
     ['[what are some recent publications about yarnbombing]', false,
      'Try again. Stating what you want in this way, introduces a lot of extra words into a query.']
 ]
}
}}}

This code represents a single !JavaScript object with two attributes. The first attribute is {{{questionType}}}. The value {{{'multiple choice'}}} indicates that this is answer is for one multiple-choice question. The second attribute is {{{choices}}}. The value of this attribute is an array of the possible answers to the question and what to do with each.

Each element of the {{{choices}}} array is itself a 3-element array whose values are:
   * The text to display for this answer.
   * A boolean indicating whether or not this is the correct answer.
   * The text to display if this choice is submitted.

For this question, students see the following:

https://www.corp.google.com/~vpg/no_crawl/cb/answer-multiple.png

Students see a list of possible answers, a button labelled *Check Answer*, and an empty text box. When they choose one of the answers and click on *Check Answer*, the code displays the string associated with that answer. In this example, if the user submits the answer [yarnbombing news article], the code displays "Try again. This is a risky approach, since many news articles do not call themselves 'news articles' on the page.".

If students choose the correct answer, the code also highlights the line containing that answer.

==== A group of multiple-choice questions ====

Sometimes you want to provide information about student answer only after they have answered a group of multiple-choice questions. The code for a group of multiple-choice questions looks as follows:

{{{
{questionType: 'multiple choice group',
 questionsList: [ 
    {
     questionHTML: '<b>1.</b> In the United States, the state of California is known for its earthquakes. Have there been earthquakes in Iowa?<br/>',
     choices: ['Yes', 'No'],
     correctIndex: 0
    },

    {
     questionHTML: '<b>2.</b> Has there ever been an earthquake in Maine?<br/>',
     choices: ['Yes', 'No'],
     correctIndex: 0
    },

    {
     questionHTML: '<b>3.</b>Which state (Iowa or Maine) had an earthquake more recently?<br/>',
     choices: ['Iowa', 'Maine'],
     correctIndex: 1
    }
 ],
 allCorrectOutput: 'Hopefully you used Control-F to find the information quickly.',
 someIncorrectOutput: 'Remember, you can use Control-F to find information like this more quickly. Please try again.'
}
}}}

This code represents a single !JavaScript object with four attributes:

  * {{{questionType}}}. The value {{{'multiple choice group'}}} indicates that this is answer is a group of multiple-choice question. 

  * {{{questionsList}}}. The value of this attribute is an ordered array of the related questions. Each element of the {{{questionsList}}} array is a !JavasScript object representing one question. Each object has 3 attributes:
     * {{{questionHTML:}}} HTML representing the text to display for this question.
     * {{{choices:}}} An array of the possible answers to this question.
     * {{{correctIndex:}}} The index of the correct answer in the {{{choices}}} array. (Remember that !JavaScript arrays are 0-based.)

  * {{{allCorrectOutput}}} is the text to display when the student correctly answers all questions in the group.

  * {{{someIncorrectOutput}}} is the text to display when the student incorrectly answers at least one of the questions. In addition to this text, students see how many of their answers were incorrect.

For this example, if students answer one question correctly, they see the following:

https://www.corp.google.com/~vpg/no_crawl/cb/answer-group.png




==== Free text ====

The final type of answer is a free text area. Use this answer type when your question is somewhat open ended. 

You need to be very careful with the wording of your question. 

{{{
  { questionType: 'freetext',
    correctAnswerRegex: /white?/i,
    correctAnswerOutput: "Correct--Many charts, tables, and graphs have white backgrounds, so filtering for white images helps you find them faster.",
    incorrectAnswerOutput: "Try again. Consider what color would be dominant in images of charts, tables, and graphs. Look at the results above. Each of those sources is traditionally printed on paper.",
    showAnswerOutput: "Our search expert says: I would click on white in the color grid, since many charts, tables, and graphs have white backgrounds." },
}}}

Options
{{{
'correctAnswerRegex' is a regular expression that matches the correct answer
'correctAnswerOutput' and 'incorrectAnswerOutput' are what to display when the checked answer is correct or not. If those are both null, then don't generate a 'Check Answer' button.
'showAnswerOutput' is what to display when the user clicks the 'Skip & Show Answer' button (if null, then don't display that option).
}}}

Lookee:

https://www.corp.google.com/~vpg/no_crawl/cb/answer-free.png


== Debugging changes ==

Changes you make to any file in the {{{views}}} directory or to any file in the {{{assets/js}}} directory appear automatically in your running development server.

That is, after you make a change to one of these HTML or !JavaScript files, simply load (or reload) a page that uses that page and the change appears. 