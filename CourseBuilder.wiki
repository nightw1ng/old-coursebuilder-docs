#summary Home page.
<h1>Course Builder</h1>

Welcome to Course Builder, Google's experiment with creating MOOCs!

<wiki:toc max_depth="2" />

==The “Power Searching with Google” Experiment==

For two weeks in July 2012, Google hosted an online, community-based course called [http://www.google.com/insidesearch/landing/powersearching.html Power Searching with Google]. The course showcased search techniques and how to use them to solve real, everyday problems. We created Power Searching as a MOOC (Massive Online Open Course) by using a variety of Google’s existing products to foster a student community and by writing an App Engine application to create the course material and assessments. 

We were quite pleased with the success of Power Searching with Google. We had 155,000 students register for the course, from 196 countries. Of these, 29% of those who completed the first assessment passed the course and received a certificate. The discussion forums and Google+ streams were very active with students asking and answering questions, and providing additional ideas and content beyond what’s offered by the instructor.

Course Builder represents our decision to open source the code we used to create Power Searching and to document our use of that code in conjunction with Google products to create the entire experience.

Power Searching is only one instance of a MOOC. Simply put, a MOOC is a course, all of whose materials are online and that has been optimized to work for lots and lots of students. What this actually means can vary quite a bit. Traditionally, in a MOOC:

  * the students are physically distributed.
  * the students interact with the instructors and other students primarily or exclusively online, not in person.
  * the interactions between students and between students and instructors are "semi-synchronous"; that is, students do some parts on their own time and at  their own pace, but they do other parts at the same time as each other and may have work with attached deadlines.

Past those simple points, there are significant differences in implementation and philosophy of what constitutes a MOOC. Many people are experimenting with different approaches, using different code and different interaction models between students, instructors, and even casual visitors. 

For Power Searching with Google, we chose one approach. It’s not the only approach; it’s not the most innovative approach. This approach is not appropriate for all subjects. But it was relatively easy to create and was extremely successful for this subject matter. We’d like to share that approach and code with you. 

==What's in a Course?==

The primary characteristics of a course such as Power Searching with Google are as follows:

  * *Course content and delivery*<br>The material that you formally convey to students. Formal content can be lessons recorded or written in advance. It can also be live question and answer sessions with instructors.
  * *Assessments and activities* <br>Graded assessments with a fixed deadline to track student progress. Ungraded assessments, called *activities*, to provide feedback and hints to students.
  * *Social interactions* <br>An important component of any MOOC is the interactions among the students themselves and the interactions between students and the instructors or teaching assistants (TAs).
  * *Administrivia* <br>Of course, there are bits and pieces required to register students, to get the course up and running, to track usage, and so on.

For more information on these aspects, see [WhatsInACourse What’s in a Course?]

== How to create a course with Course Builder ==

  # [OnePlan Plan before you start]. <br>Before you get into the details of creating your course, take 30 minutes to think about the following areas and write down your answers. Use those answers to guide everything else; they can save you a lot of time in the end. For details, see [OnePlan Step 1].
  # [TwoDevelop Develop content without the technology].<br>It’s extremely tempting to just dive in and start recording videos and writing assessments and so on. But if you do that, you will likely end up with a course that doesn’t make sense and doesn’t satisfy your primary goal or any of the supplementary objectives you planned. That said, even though we recommend you do initial development without using the technology, there are aspects of the final delivery that should influence your development strategy. For details, see [TwoDevelop Step 2].
  # [ThreeImplement Implement your content using your technology].<br>Once you have a very clear idea of what you want to accomplish, then put it into the format you’ll eventually use. At this point, you can create videos, implement assessments, set up your groups, and do all that other fun stuff. For details, see [ThreeImplement Step 3].
  # [FourPilot Pilot with your target audience].<br>The experience of teaching a course as a MOOC is quite different from normal classroom teaching. We strongly encourage you to have some people go through your entire course before you release it to actual students. You may find, as we have, that a large percentage of your work comes after the first pilot, when you see how people actually interact with your material. For details, see [FourPilot Step 4].
  # Go live!
  # Iterate for your next version.

== What do you need to know to use Course Builder? ==

Course Builder is an experiment. As such, we have not spent much time making it easy to use. If you want to use Course Builder to create a MOOC, you should have the following qualifications: 

  * *Experience creating course material.* We expect that you have already created courses of your own, either for a traditional live classroom or for a more traditional online class. We do not cover instructional design principles in general, only a bit as it applies to using Course Builder effectively.

  * *HTML familiarity.* You need to be comfortable writing simple HTML. To create activities and assessments, you'll need to encode the HTML for paragraphs, lists, and images. To create assessments, you'll also need to understand HTML forms. 

  * *!JavaScript familiarity.* You need to be comfortable with !JavaScript arrays, simple objects, and regular expressions. Of these, regular expressions tend to be the biggest stumbling block.The [https://developer.mozilla.org/en-US/docs/JavaScript/Guide/Regular_Expressions Mozilla Developer Network] has an introduction to regular expressions. To create assessments, you need familiarity with writing !JavaScript functions.

  * *App Engine familiarity is a plus.* This documentation covers what you need to know about App Engine. Previous familiarity would make your life easier.