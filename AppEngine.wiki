#summary Hints for using App Engine

<h1>Work with App Engine</h1>

If you are not familiar with App Engine, read [https://developers.google.com/appengine/docs/whatisgoogleappengine What is Google App Engine?].

You do not need to be an App Engine expert to work with Course Builder. There are just a few things you should be familiar with. Much of this is discussed on other pages. We summarize them here.

<wiki:toc />

*Note:* In the following, you'll see input and output from working in a shell. In these areas, new command lines start with {{{$}}} which you do not type. Lines that do not start with {{{$}}} are output from an earlier command.

== Download and install Python 2.7 ==

Make sure you have Python 2.7 on your system. Visit the general Python 2.7 [http://python.org/download download page] to get the right version for you. (Python 2.7.3 was the latest at the time of this writing.)

== Download and install App Engine ==

Follow [https://developers.google.com/appengine/downloads#Google_App_Engine_SDK_for_Python this link] to download the Python App Engine SDK for your platform.

  * *PC:* Run the downloaded installer .msi by double clicking. Follow all on-screen instructions. Once completed, you should find the App Engine Launcher icon on your desktop or be able to find it via Start -> Programs. There is no equivalent set of command-line tools for PCs, so there you must use the Launcher.
  * *Mac:* Open the downloaded .dmg file and drag the App Engine icon into the Applications folder. Optionally,  open the Applications folder and drag the App Engine icon to your Dock so that you can start the App Engine Launcher more conveniently. Putting App Engine in the Applications folder also installs the command-line tools.
  * *Linux or other POSIX-compliant system:* After downloading the .zip file, go to the directory where you want to install App Engine. When you unzip the archive, it creates a subdirectory named google_appengine. Add that directory to your shell's path so that it can find the command-line tools when you need them.

When developing on Google App Engine, you have a choice of performing administrative tasks using a graphical interface (GUI) or a traditional command-line interface. The GUI, called The Launcher, is available for users of PCs or Macs. Command-line tools are available on any POSIX-based system such as Mac OS X or Linux. The Python App Engine SDK includes both tools. 

== Name your app for production ==

When you're ready to make your course available to students, you'll run your app in production. In production, your app lives in Google data centers. Google runs the production server. Google must be able to provide a URL for people to use to reach your application.

By default, Google gives your app a domain name so that it can be reached from almost anywhere on the internet. That domain is of the form _*{{{APP_ID}}}*_{{{.appspot.com}}} where _*{{{APP_ID}}}*_ is the app ID you chose to record in the {{{app.yaml}}} file. You must choose a name that hasn't already been used by anybody else.

App ID names can only be used once and can never be returned to the pool of available names. Whether your app is running, not running, or deleted, once a name has been chosen, it can no longer be used by any other app. More details on creating an app can be found in the [https://developers.google.com/appengine/docs/python/gettingstartedpython27/uploading official docs]. 

Unfortunately, you only find out if the name you choose is available when you register the app with Google. You must register it before you can deploy it. For more information, see [UploadCode Deploy Your App].

== Start your server ==

Your development server is where you modify and test your application before releasing it to production.

=== From the Launcher ===

To start the development server from the Launcher:
  # Select your app. 
  # When it's highlighted, click the *Run* button to start the server (for that app).

Once the icon to the left of the app name is green, your server is ready to accept requests.

Alternatively, because the command-line version has more options, you may wish to run the development server from your Unix command-line shell. 

=== From a shell ===

Open a Unix command-line shell. In the shell:

  {{{$ cd }}}_*{{{APPPATH}}}*_<br>
  {{{$ dev_appserver.py . &}}}

where _*{{{APPPATH}}}*_ is the directory containing your app. As the command runs, you may see some warnings you can ignore and questions you must answer.

Once the app is set up, you see a URL reference to the hostname and port you use to connect to your app from a web browser. It defaults to {{{http://localhost:8080}}}.

The {{{&}}} at the end of the {{{dev_appserver.py}}} command tells Unix to run this command in the background. That means that while your server runs you can continue to use that shell for other operations. If you do not see the shell prompt, press enter.

=== From a shell, to enable remote access ===

By default, your app is only available from the machine on which you start it. To get access to your development server from another machine on the network, you need to request this through the command line. Start your development server with this command:

  {{{$ cd }}}_*{{{APPPATH}}}*_<br>
  {{{$ dev_appserver.py . -a 0.0.0.0 &}}}

where _*{{{APPPATH}}}*_ is the directory containing your app. (The {{{&}}} has this command run in the background.)

=== From a shell, to clear lesson and unit data ===

Before you can put new or changed data into your data store, you must clear out the data that is already there. This is only necessary when you change either {{{data/lesson.csv}}} or {{{data/unit.csv}}}.

From a Unix shell simply start your development server with an extra argument:

  {{{$ cd }}}_*{{{APPPATH}}}*_<br>
  {{{$ dev_appserver.py --clear_datastore . &}}}

where _*{{{APPPATH}}}*_ is the directory containing your app.  (The {{{&}}} has this command run in the background.)

== Stop your server ==

=== From the Launcher ===
If you started your server from the Launcher, you can stop it there:

  # Select your app. 
  # When it's highlighted, click the *Stop* button to start the server (for that app). 

Once the icon to the left of the app name is gray, your server is stopped.

=== From a shell ===
If you started your server from the command line, you can stop it there:

Use the {{{ps}}} command to find the process number associated with your server and then to kill that server. 

  {{{$ ps x | grep dev_appserver}}}<br>
  {{{PID TTY TIME CMD}}}<br>
  {{{25603 ttys000    0:00.07 -bash}}}<br>
  {{{25993 ttys000    0:00.71 /Library/Frameworks/Python.framework/Versions/2.7/Resources/Python.app/Contents/MacOS/Python /usr/local/bin/dev_appserver.py .}}}<br>
  <br>
  {{{$ kill 25993}}}

== View the App Engine Admin Console ==

When App Engine starts your app, it also starts an associated Admin Console. If your app is available at {{{http://localhost:/8080}}}, its Admin Console is at {{{http://localhost:8080/_ah/admin}}}.

From the console, you can see and modify the content of your data store.

<img src="https://www.corp.google.com/~vpg/no_crawl/cb/admin-console.png" height=231 width=327 />

== Modify your app and see the effects ==

While working on your app, there are several places you can change information. Depending on the type and location of the information, either the changes you make take effect immediately, or you need to do something special to make them take effect. Common changes include:

  * *HTML:* Change HTML view files in the {{{views}}} directory.
  * *!JavaScript:* Change !JavaScript activity or assessment files in the {{{assets/js}}} directory.
  * *Image:* Change image files in the {{{assets/img}}} directory.
  * *CSV:* Change home page or lesson information in the files {{{data/unit.csv}}} or {{{data/lesson.csv}}}.

=== Changes to non-data files ===

Changes you make to the {{{views}}} directory or to either subdirectory under {{{assets}}} appear immediately in your development server. You do not have to stop or reload anything. Simply change the files and load (or reload) the corresponding page on your server.

=== Change to data files ===

When you  make changes to either file in the {{{data}}} directory, you have two choices:

  * Clear out all of the existing data and start afresh with your changes.<br>While this sounds drastic, in it is the safer option. You only make your changes in the source code and then you reload those files. This way you're certain your code is in sync with your server.

  * Manually change only the parts of the data store that you changed in the data files.<br>You can use the Admin Console to remove or add individual records in either the Lesson or Unit store. This feels like a smaller change, but it requires you to enter the same information in two places, which can be error prone.


==== Reload all data ====

To clear and reload all data,  you need to stop your development server, restart it clearing out the old data, and then reload the new data. You can do this whole process from a shell.

1a. If you're running your server from the Launcher:

  {{{$ ps x | grep Launcher       # Find the Launcher's process number}}}<br>
  {{{25677   ??  S      0:00.50 /Applications/GoogleAppEngineLauncher.app/Contents/MacOS/GoogleAppEngineLauncher -psn_0_499834}}}<br>
  {{{28161 s000  U+     0:00.00 grep Launcher}}}<br>
  <br>
  {{{$ kill 25677}}}

1b. If you're running your  server from the shell:

  {{{$ ps x | grep dev_appserver   # Find the process number}}}<br>
  {{{30849 s000  S      0:00.85 /Library/Frameworks/Python.framework/Versions/2.7/Resources/Python.app/Contents/MacOS/Python /usr/local/bin/dev_appserver.py .}}}<br>
  {{{30856 s000  R+     0:00.01 grep dev_appserver}}}<br>
  <br>
  {{{$ kill 30849}}}

2. Start your development server from the command line, clearing out the old data and reloading the changed data:

  {{{$ cd }}}_*{{{APPPATH}}}*_<br>
  {{{$ dev_appserver.py --clear_datastore . &}}}<br>
  <br>
  {{{$ cd data}}}<br>
  {{{$ appcfg.py upload_data --url=http://localhost:}}}_*{{{PORT}}}*_{{{/_ah/remote_api --config_file=../bulkloader.yaml  --filename=unit.csv --kind=Unit}}}<br>
  {{{$ appcfg.py upload_data --url=http://localhost:}}}_*{{{PORT}}}*_{{{/_ah/remote_api --config_file=../bulkloader.yaml  --filename=lesson.csv --kind=Lesson}}}

where _*{{{APPPATH}}}*_ is the directory containing your app and _*{{{PORT}}}*_ is your app's port number. You will be asked for your credentials (Google user name and password) twice, once for loading each data file.

==== Change some data ====

To change only some of the lesson or unit data, there are two steps:

  # Make the appropriate changes in the {{{data/lesson.csv}}} or  {{{data/unit.csv}}} file.
  # Visit the Admin Console.
  # From the *Entity Kind* drop down, choose whichever type of data you changed (Lesson or Unit).<br>A list of data appears.
  # (Optional) If you changed an existing piece of data, select the row containing that data and click on *Delete*.
  # Click on *Create New Entity* to add a new piece of data. Notice that you have to add the entire row over again, even if you're changing existing information.

== Troubleshooting ==

=== Development server won't start ===

If you do not see the registration page when you start your server for the first time, there may be an error somewhere.

If you start your app from the command line, errors messages appear on the console. If you start your app from the Launcher, error messages appear in the logs. To see the logs, click on *Logs* in the Launcher's task bar.

One common problem is that, even though you downloaded Python 2.7, App Engine may not notice. In this case, the log says either that you are not runing Python 2.7 or has warnings about using a runtime older that is than the production runtime.

In this situation, you need to manually specify the path for Python 2.7. To do so:
  # First, find out what that path is:
    # Open a Unix shell.
    # Run the command {{{which python}}}
    # Copy the path that appears (for example, {{{/Library/Frameworks/Python.framework/Versions/2.7/bin/python}}})
  # From the *!GoogleAppEngineLauncher* menu, choose *Preferences*.<br>A dialog box appears.
  # On the *Python Path* line, enter the path you found above.

=== Cannot connect to upload data ===

When you enter your credentials, you may get the following error:

  {{{urllib2.URLError: <urlopen error [Errno 61] Connection refused>}}}

If you do, then you have forgotten to start your development server. 

== Official App Engine documentation ==

There's a lot of [https://developers.google.com/appengine/docs/python/config/appconfig#Required_Elements official documentation] for App Engine.