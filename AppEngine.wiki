#summary Hints for using Google App Engine during development

<h1>Develop with Google App Engine</h1>

If you are unfamiliar with Google App Engine (GAE), but know something about cloud computing, read [https://developers.google.com/appengine/docs/whatisgoogleappengine What is Google App Engine?] If you're completely new to cloud computing as well, a more user-friendly introduction to the cloud and GAE can be found in this [https://developers.google.com/academy/apis/cloud/appengine/intro/ Introduction to Google App Engine].

You do not need to be a GAE expert to work with Course Builder. There are just a few things you should be familiar with while developing your course. Much of this is discussed on other pages. We summarize it  here.

This page discusses using GAE in development. For information on working with it to deploy your course and to modify it after deployment, see [UploadCode Deploy Your App].

*Note:* Several of these pages refer to a "shell or command prompt". If you're unsure what that means, see [http://code.google.com/p/gcb-x-03141590/wiki/FAQ#What%27s_a_%22shell_or_command_prompt%22? What's a "shell or command prompt"?]

<wiki:toc />

== Important: Quotas and billing ==

The use of GAE for your course may incur some costs. Currently, each GAE application can consume a certain level of computing resources for free, controlled by a set of [https://developers.google.com/appengine/docs/quotas limits]. If you need resources above these free limits, you can switch to a paid app to set a daily resource budget. When you convert to a paid app you will spend a minimum of $2.10/week. This allows you to purchase additional resources when needed.

It's difficult to predict in advance the costs for your course, as GAE has a fairly complex cost structure (see [https://developers.google.com/appengine/docs/billing Billing and Budgeting Resources] and [https://developers.google.com/appengine/docs/quotas Quotas] for details). It is likely that any significantly sized course _will_ incur costs. For rough comparison purposes, the Power Searching course run by Google incurred billable charges of approximately $20/day to support a course enrollment of approximately 150,000 students.  We've done tests which suggest that the code might support a course of up to 300 students for free. That figure is not a guarantee and is dependent on a fairly complex set of variables and usage patterns, such as enrollment, engagement, drop-out, code changes, and so on.

Remember that you can begin development and testing of your course at no charge, by using the downloaded development server (from the [https://code.google.com/p/course-builder/wiki/AppEngine#Download_and_install_App_Engine Google App Engine SDK]) and the free quota initially provided by GAE for deployed applications. That free quota is fairly limited and is unlikely to support a sizable course enrollment.

Also note that you can control your cost by setting a [https://developers.google.com/appengine/docs/billing#Setting_a_Daily_Budget maximum daily budget], which will cap your costs (and your quota) per day.  However, doing so may lead to your course becoming unavailable for the remainder of any day that your application exceeds its budget.

== Download and install Python 2.7 ==

Make sure you have Python 2.7 on your system. To find out if you do...

==== Check on Mac, Linux, or other POSIX-compliant systems ====
On Mac, Linux, or other POSIX-compliant systems, open a shell and type:

  {{{which python}}}

If Python 2.7 is installed, you should see something similar to one of the following:

  <font color=green> {{{/Library/Frameworks/Python.framework/Versions/2.7/bin/python}}} </font><br>
  <font color=green> {{{/usr/local/bin/python}}} </font>

The first of these indicates the Python version. The second does not. In that case, you need to check to see if you have the correct version of Python, with the following command:

  {{{python -V}}}

The output of this command is similar to the following:

  <font color=green> {{{Python 2.7.3}}} </font>

==== Check on PC ====

On a PC, open a *Command Prompt* and type
  {{{python}}}

If Python is installed, you should see something similar to:
  <font color=green> {{{Python 2.6.4 (r264:75708, Oct 26 2009, 07:36:50) [MSC v.1500 64 bit (AMD64)] on win32}}} </font><br>
  <font color=green> {{{Type "help", "copyright", "credits" or "license" for further information.}}} </font><br>
  <font color=green> {{{>>>}}} </font>

This starts the Python interpreter and indicates the version. If Python is not installed, you see:
  <font color=green> {{{'python' is not recognized as an internal or external command,}}} </font><br>
  <font color=green> {{{operable program or batch file.}}} </font>

==== Getting Python ====

If you don't have Python at all or you have the wrong version, visit the general Python 2.7 [http://python.org/download download page] to get the right version for you. You probably want to simply download the current production version for your platform. (Python 2.7.3 was the latest at the time of this writing.)

== Download and install GAE ==

Follow [https://developers.google.com/appengine/downloads#Google_App_Engine_SDK_for_Python this link] to download the GAE SDK for Python for your platform.

  * *PC*: Run the downloaded installer .msi by double clicking. Follow all on-screen instructions. On the screen that asks for the destination folder, be sure that *Add product path to user PATH* is checked. This is required for the command-line tools to work properly. Once completed, you should find the GAE Launcher icon on your desktop or be able to find it via Start -> Programs.

  * *Mac:* Open the downloaded .dmg file and drag the GAE icon into the Applications folder. Optionally,  open the Applications folder and drag the GAE icon to your Dock so that you can start the GAE Launcher more conveniently. Putting GAE in the Applications folder also installs the command-line tools.

  * *Linux or other POSIX-compliant system:* After downloading the .zip file, go to the directory where you want to install GAE. When you unzip the archive, it creates a subdirectory named google_appengine. Add that directory to your shell's path so that it can find the command-line tools when you need them.

When developing on GAE, you have a choice of performing administrative tasks using a graphical interface (GUI) or a traditional command-line interface. The GUI, called the Launcher, is available for users of PCs or Macs. Command-line tools are available on any POSIX-based system such as Mac OS X or Linux. The GAE SDK for Python includes both tools.


== Start your development server ==

Your development server is where you modify and test your application before releasing it to production.

=== From the Launcher (PC, Mac) ===

To start the development server from the Launcher:
  # (Mac only) The first time you start the Launcher, you may see a dialog box asking you about symbolic links:<br> <img src="http://wiki.course-builder.googlecode.com/git/images/symlinks.png" /><br>For GAE to work, you must agree to set up symbolic links.
  # Select your app.
  # When it's highlighted, click the *Run* button to start the server (for that app). <br>Once the *Browse* button is enabled, your server is ready to accept requests.
  # Click on the *Browse* button to visit the app in a web browser.<br>You should see the login page for the server.<br> <img src="http://wiki.course-builder.googlecode.com/git/images/server-login.png" />
  # If you do not see the login page, read [#Troubleshooting Troubleshooting].
  # If you do see the login page, you can use any login name you want; this is the login for your development server, it does not have to match any real email address.

Alternatively, because the command-line version has more options, you may wish to run the development server from your shell or command prompt.

=== From a shell or command prompt ===

Open a shell or a command prompt. In the window:

  # Change directory to the one you specified as the path for your app.
  # Run the server with the following command:<br>{{{dev_appserver.py . }}}<br> _Note that the period at the end of that command is necessary._
  # As the command starts running, you may see some warnings you can ignore and questions you must answer. <br>Once the app is set up, you see a URL reference to the hostname and port you use to connect to your app from a web browser. Typically, this URL is {{{http://localhost:8080}}}, but the port number ({{{8080}}}) may be different.
  # Open a browser window and navigate to the URL. You should see the login page for the server (as shown above for a PC).
  # If you do not see the login page, read [#Troubleshooting Troubleshooting].
  # If you do see the login page, you can use any login name you want; this is the login for your development server, it does not have to match any real email address.

=== From a shell or command prompt, to enable remote access ===

By default, your app is only available from the machine on which you start it. To get access to your development server from another machine on the network, you need to request this through the command line. Start your development server with this command:

  {{{cd }}}_*{{{APPPATH}}}*_<br>
  {{{dev_appserver.py . -a 0.0.0.0}}}

where _*{{{APPPATH}}}*_ is the directory containing your app.

== Stop your development server ==

=== From the Launcher (PC, Mac) ===
If you started your development server from the Launcher, you can stop it there:

  # Select your app.
  # When it's highlighted, click the *Stop* button to start the server (for that app).

Once the icon to the left of the app name is gray, your development server is stopped.

=== From the Task Manager (PC) ===

If you started your server from a command prompt on a PC, bring up the Windows Task Manager.

  # On the *Applications* tab, search for the task that looks like:<br>  {{{Command Prompt - dev_appserver.py .}}}
  # Select the line for that task.
  # Click on *End Task*.

=== From a shell (Mac, Linux, or other POSIX-compliant system) ===
If you started your development server from a shell, you can stop it there:

Use the {{{ps}}} command to find the process number associated with your server and then to kill that server.

  {{{ps x | grep dev_appserver}}}<br><br>
  <font color=green> {{{PID TTY TIME CMD}}} </font><br>
  <font color=green> {{{25603 ttys000    0:00.07 -bash}}} </font><br>
  <font color=green> {{{25993 ttys000    0:00.71 /Library/Frameworks/Python.framework/Versions/2.7/Resources/Python.app/Contents/MacOS/Python /usr/local/bin/dev_appserver.py .}}} </font><br>
  <br><br>
  {{{kill 25993}}}

== View the GAE Admin Console ==

When GAE starts your app, it also starts an associated Admin Console. If your app is available at {{{http://localhost:/8080}}}, its Admin Console is at {{{http://localhost:8080/_ah/admin}}}.

From the console, you can see and modify the content of your data store.

<img src="http://wiki.course-builder.googlecode.com/git/images/admin-console.png" height=231 width=327 />

== Modify your app and see the effects ==

While working on your app, there are several places you can change information. Common changes include:

  * *course.yaml* Change {{{course.yaml}}} file.
  * *!JavaScript:* Change !JavaScript activity or assessment files in the {{{assets/js}}} directory.
  * *Image:* Change image files in the {{{assets/img}}} directory.
  * *CSV:* Change home page or lesson information in the files {{{data/unit.csv}}} or {{{data/lesson.csv}}}.

Occasionally you may choose to also modify {{{HTML}}} and {{{Python}}} files. Modifications to these files are discouraged. These files will change in the future and it may be difficult for you to port your changes to the future version of Course Builder.

=== Make changes while local server is running ===

When you make changes to the files in the {{{data}}} directory, {{{course.yaml}}} file or {{{views}}} directory, while local server is running, those changes appear immediately. Simply reload the affected pages and the changes are visible. Note that !JavaScript or image files located in {{{assets}}} can be cached in the browser. Clear browser cache to see your changes.

=== Restart local server and reload all data ===

To clear and reload all data,  you need to stop your development server, restart it clearing out the old data, reload the new data, and then tell GAE to start using the new data..

  # Stopping your development server depends on how you started it:
    * If you started your server *from the Launcher*, go to the Launcher application and quit it.
    * If you started your server *from a command prompt on a PC*, bring up the Windows Task Manager and on the *Applications* tab, search for the task that looks like {{{Command Prompt - dev_appserver.py .}}} Select that task and click on *End Task*.
    * If you started  your server *from a shell on Mac, Linux, or other POSIX-compliant system*:<br><br>  {{{ps x | grep dev_appserver   # Find the process number}}}<br><br><font color=green> {{{30849 s000  S      0:00.85 /Library/Frameworks/Python.framework/Versions/2.7/Resources/Python.app/Contents/MacOS/Python /usr/local/bin/dev_appserver.py .}}} </font><br><font color=green> {{{30856 s000  R+     0:00.01 grep dev_appserver}}} </font><br> <br>{{{kill 30849}}}
  # You can either start your development server from the Launcher or the command line. In either case, you must be sure to clear out the old data:
    * To start from the Launcher:
      * Double-click on the name of the application to get the *Settings* dialog box.
      * In the *Launch Settings* area, choose *Clear datastore on launch*. <br> (This is a sticky setting. Once you set it, every time you relaunch the application, GAE clears the data store.)
      * Click on *Update*.
      * Back in the Launcher, click on *Run* to restart the application.
    * To start from the command line:<br><br>  {{{cd }}}_*{{{APPPATH}}}*_<br>  {{{dev_appserver.py --clear_datastore .}}} <br><br>where _*{{{APPPATH}}}*_ is the directory containing your app. _Note that the period at the end of that command is necessary._
 
== Create a test server in production ==

You may want to test your course in the production environment before you make it publicly available. Rather than have a truly _private_ course in production, we have found it sufficient to have a separate _version_ of the course at a related, but unpublicized, URL. The key is that GAE allows versioning of your app and provides a separate URL for each version. (For details, see [https://developers.google.com/appengine/docs/python/runtime?hl=en#Requests_and_Domains Requests and Domains]).

Remember that if the name of your app is _*{{{MYCOURSE}}}*_, it's available at {{{http://}}}_*{{{MYCOURSE}}}*_{{{.appspot.com}}}. You can use the {{{version}}} field in {{{app.yaml}}} to create and deploy a second version of the app. In this situation, you get a separate URL for that version. For example, if you specify {{{version: latest}}}, that gets deployed to  {{{http://latest.}}}_*{{{MYCOURSE}}}*_{{{.appspot.com}}}.

One caveat: By default, all deployed versions of an app use the same datastore. That is, they all share the same {{{Lesson}}}, {{{Unit}}}, and {{{Student}}} entities. You can use different [https://developers.google.com/appengine/docs/python/multitenancy/overview?hl=en namespaces] to change this behavior, but that is probably overkill if you just want a test server before release of your course.

This section talks about details of creating separate temporarily public "under construction" and temporarily hidden "latest" versions of your course in production.

=== Create multiple versions ===

What does it mean to create versions of a GAE application?

When you load an application into GAE as described in [UploadCode#Upload_(or_deploy)_your_app Upload your app], it decides what application it is based on the {{{application}}} parameter in {{{app.yaml}}}.

Assume you have two different directories, each of which contains code for a Course Builder course *and* each of their {{{app.yaml}}} files has the same value for the {{{application}}} parameter. If you run {{{appcfg.py upload}}} in both of these directories, GAE loads both applications to production and considers them to be the same application.
  * If the value of the {{{version}}} parameter is the same in both {{{app.yaml}}} files, then App Engine considers there to be only one version of the application and overwrites the first one loaded with the second one.
  * If the value of the {{{version}}} parameter is different in the {{{app.yaml}}} files, then App Engine considers there to be two versions of the application.
    * The *first* one you upload is the default version. That version is available at {{{http://}}}_*{{{MYCOURSE}}}*_{{{.appspot.com}}} and at  {{{http://}}}_*{{{VERSION.MYCOURSE}}}*_{{{.appspot.com}}}, where _*{{{VERSION}}}*_ is the value of the {{{version}}} parameter.
    * The second one you upload is a non-default version. It is available only at {{{http://}}}_*{{{OTHERVERSION.MYCOURSE}}}*_{{{.appspot.com}}}, where _*{{{OTHERVERSION}}}*_ is the value of its {{{version}}} parameter.

Notice, by the way, that a version doesn't have to be a number; it can be any alphanumeric string (without spaces).

=== Change the default version ===

If you do nothing special, the first version of an application that is uploaded remains the default version (that is, the version you get when you simply enter {{{http://}}}_*{{{APPID}}}*_{{{.appspot.com}}}). Later versions do not automaically supercede it. You can change the default version yourself:

  # Visit http://appengine.google.com.
  # Choose your app.
  # Click on *Versions* in the left navigation.
  # Pick the radio button for the version you want to be the default.
  # Click on *Make Default*.

=== Make "under construction" and "latest" versions ===

To create an "under construction" public version as the temporary default and a "latest" hidden version as a working version, follow steps similar to the following:

  # Make two directories that contain the sample app.
  # Edit the {{{app.yaml}}} file in each of them.
  # In the directory for your temporarily public "under construction" version, specify _*{{{mycourse}}}*_ as the value of {{{application}}} and specify {{{underconstruction}}} as the value of {{{version}}}.
  # In the directory for your working version, specify _*{{{mycourse}}}*_ as the value of {{{application}}} and specify {{{latest}}} as the value of {{{version}}}.
  # In the under construction directory,
    # Replace the entire contents of {{{views/course.html}}} with<br>{{{<html><body>Really under construction.</body></html>}}}
    # Replace the text in {{{views/register.html}}} with<br>{{{Under construction.}}}
  # In the working version directory, do all the work you need to create your course.
  # Upload both versions to production, as described in [UploadCode#Upload_(or_deploy)_your_app Upload your app], making the app in the under construction directory be the default version, as described [#Change_the_default_version above].
  # Test away.
  # When you're ready to release your application, hide the "under construction" version by changing the default version to your working version, which makes that one visible.

=== Hide your course from search engines ===

To further decrease the likelihood of someone stumbling upon your course, you can create a [http://www.robotstxt.org/ robots.txt] file to tell search engines such as Google's search engine to ignore your pages.

You add a {{{robots.txt}}} file to your application by creating that file and modifying {{{app.yaml}}} to know about it.

1. Create a {{{robots.txt}}} file in the top-level of your application directory (the same place that contains {{{app.yaml}}}). In robots.txt, specify:

{{{
User-agent: *
Disallow: /
}}}

This tells robots (such as Google's robots that crawl the web to create its index) to ignore everything in this site.

2. In {{{app.yaml}}}, the handlers section looks like this:

{{{
handlers:
- url: /remote_api
  script: $PYTHON_LIB/google/appengine/ext/remote_api/handler.py
  login: admin
- url: /_ah/dev_admin(/.*)?  # provides interactive console
  script: $PYTHON_LIB/google/appengine/ext/admin
  login: admin
  secure: always
- url: /.*
  script: main.app
}}}

Add a new entry to the top of handlers section as follows:

{{{
- url: /robots.txt
  static_files: robots.txt
  upload: robots.txt
}}}


Later, when you release the course, if you want it to be findable, you should reverse this change: remove the entry from {{{app.yaml}}} and delete the {{{robots.txt}}} file.

=== Restrict access to your course ===

You may decide that simply making your course harder to find is not adequate. You may want to actually restrict access to a specific set of testers. To do this, you must write new Python code. We do not provide this code for you, but the basic idea is described here.

Any time someone comes to any URL in your course, Course Builder figures out if that person is already registered. If not, Course Builder displays the registration page.
The {{{RegisterHandler}}} class (defined in {{{controllers/utils.py}}}) determines what happens on the registration page.

Before actually rendering the registration page, the {{{RegisterHandler's get}}} method checks to see if the person is already registered. (It does this check again, in case the person went directly to the registration page instead of being redirected there from another page.)

If the persion is registered, {{{get}}} displays the course's home page. If the person is not registered, {{{get}}} displays the registration page.

Instead of immediately showing the registration page, you can add some extra code to the {{{get}}} method. In that code, check whether or not the person is in the list of specified testers (the "whitelist"). If the person is on the whitelist, display the registration page. If not, display a different page that says "Sorry. Course closed." or something like that.

You can simply create the whitelist as an array of email addresses.

== Run Course Builder tests ==

Course Builder contains a set of functional tests for its source code. If you make significant changes to the source code, consider running these tests. Depending on your changes, you may also have to modify the tests.

Before you can run the tests:
  # Install Python !WebTest. To do so, follow the instructions at [http://webtest.pythonpaste.org/en/latest Testing Applications with WebTest].
  # Add !WebTest to your Python path.

Once you have !WebTest installed, run the tests with the following commands:

  {{{cd }}}_*{{{APPPATH}}}*_<br>
  {{{python ./tests/suite.py}}}

where _*{{{APPPATH}}}*_ is the directory containing your app.

== Troubleshooting ==

=== Development server won't start ===

If you do not see the registration page when you start your development server for the first time, there may be an error somewhere.

If you start your app from the command line, errors messages appear on the console. If you start your app from the Launcher, error messages appear in the logs. To see the logs, click on *Logs* in the Launcher's task bar.

One common problem is that, even though you downloaded Python 2.7, GAE may not notice. In this case, the log says either that you are not running Python 2.7 or has warnings about using a runtime older that is than the production runtime.

In this situation, you need to manually specify the path for Python 2.7. To do so:
  # First, find out what that path is:
    # Open a shell or command prompt.
    # Run the command {{{which python}}}
    # Copy the path that appears (for example, {{{/Library/Frameworks/Python.framework/Versions/2.7/bin/python}}})
  # From the *!GoogleAppEngineLauncher* menu, choose *Preferences*.<br>A dialog box appears.
  # On the *Python Path* line, enter the path you found above.

=== Cannot connect to upload data ===

When you enter your credentials, you may get the following error:

  <font color=green> {{{urllib2.URLError: <urlopen error [Errno 61] Connection refused>}}} </font>

If you do, then you have forgotten to start your development server.

== Official GAE documentation ==

There's a lot of [https://developers.google.com/appengine/docs/python/config/appconfig#Required_Elements official documentation] for GAE.

|| [https://groups.google.com/forum/?fromgroups#!categories/course-builder-forum/customize-and-deploy-course-builder-code Ask questions in the forum] ||