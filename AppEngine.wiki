
#summary Hints for using App Engine during development

<h1>Develop with App Engine</h1>

If you are unfamiliar with App Engine, but know something about cloud computing, read [https://developers.google.com/appengine/docs/whatisgoogleappengine What is Google App Engine?] If you're completely new to cloud computing as well, a more user-friendly introduction to the cloud and App Engine can be found in this [https://developers.google.com/academy/apis/cloud/appengine/intro/ Introduction to Google App Engine].

You do not need to be an App Engine expert to work with Course Builder. There are just a few things you should be familiar with while developing your course. Much of this is discussed on other pages. We summarize it  here.

This page discusses using App Engine in development. For information on working with it to deploy your course and to modify it after deployment, see [UploadCode Deploy Your App].

<wiki:toc />

== Important: Quotas and billing ==

Each App Engine application can consume a certain level of computing resources for free, controlled by a set of [https://developers.google.com/appengine/docs/quotas limits]. If you need resources above these free limits, you can switch to a paid app using Google Checkout to set a daily resource budget. When you convert to a paid app you will spend a minimum of $2.10/week. This allows you to purchase additional resources when needed. App Engine will always be free to get started, and after you've created a paid app, all usage up to the free limits will remain free.

For more information, see [https://developers.google.com/appengine/docs/billing Billing and Budgeting Resources] and [https://developers.google.com/appengine/docs/quotas Quotas].

<font color=red><<TODO Note that we plan to add a little information about typical costs for a course, but we don't have those numbers quite yet.>></font>

== Download and install Python 2.7 ==

Make sure you have Python 2.7 on your system. To find out if you do...

==== Check on Mac, Linux, or other POSIX-compliant systems ====
On Mac, Linux, or other POSIX-compliant systems, open a shell and type:

  {{{which python}}}

If Python 2.7 is installed, you should see something similar to one of the following:

  <font color=green> {{{/Library/Frameworks/Python.framework/Versions/2.7/bin/python}}} </font><br>
  <font color=green> {{{/usr/local/bin/python}}} </font>

The first of these indicates the Python version. The second does not. In that case, you need to check to see if you have the correct version of Python, with the following command:

  {{{python -V}}}

The output of this command is similar to the following:

  <font color=green> {{{Python 2.7.3}}} </font>

==== Check on PC ====

On a PC, open a *Command Prompt* and type
  {{{python}}}

If Python is installed, you should see something similar to:
  <font color=green> {{{Python 2.6.4 (r264:75708, Oct 26 2009, 07:36:50) [MSC v.1500 64 bit (AMD64)] on win32}}} </font><br>
  <font color=green> {{{Type "help", "copyright", "credits" or "license" for further information.}}} </font><br>
  <font color=green> {{{>>>}}} </font>

This starts the Python interpreter and indicates the version. If Python is not installed, you see:
  <font color=green> {{{'python' is not recognized as an internal or external command,}}} </font><br>
  <font color=green> {{{operable program or batch file.}}} </font>

==== Getting Python ====

If you don't have Python at all or you have the wrong version, visit the general Python 2.7 [http://python.org/download download page] to get the right version for you. You probably want to simply download the current production version for your platform. (Python 2.7.3 was the latest at the time of this writing.) 

== Download and install App Engine ==

Follow [https://developers.google.com/appengine/downloads#Google_App_Engine_SDK_for_Python this link] to download the Python App Engine SDK for your platform.

  * *PC:* Run the downloaded installer .msi by double clicking. Follow all on-screen instructions. Once completed, you should find the App Engine Launcher icon on your desktop or be able to find it via Start -> Programs. There is no equivalent set of command-line tools for PCs, so there you must use the Launcher.
  * *Mac:* Open the downloaded .dmg file and drag the App Engine icon into the Applications folder. Optionally,  open the Applications folder and drag the App Engine icon to your Dock so that you can start the App Engine Launcher more conveniently. Putting App Engine in the Applications folder also installs the command-line tools.
  * *Linux or other POSIX-compliant system:* After downloading the .zip file, go to the directory where you want to install App Engine. When you unzip the archive, it creates a subdirectory named google_appengine. Add that directory to your shell's path so that it can find the command-line tools when you need them.

When developing on Google App Engine, you have a choice of performing administrative tasks using a graphical interface (GUI) or a traditional command-line interface. The GUI, called The Launcher, is available for users of PCs or Macs. Command-line tools are available on any POSIX-based system such as Mac OS X or Linux. The Python App Engine SDK includes both tools. 


== Start your development server ==

Your development server is where you modify and test your application before releasing it to production.

=== From the Launcher (PC, Mac) ===

To start the development server from the Launcher:
  # Select your app. 
  # When it's highlighted, click the *Run* button to start the server (for that app). <br>Once the *Browse* button is enabled, your server is ready to accept requests.
  # Click on the *Browse* button to visit the app in a web browser.<br>You should see the login page for the server.<br> <img src="http://gcb-x-03141590.googlecode.com/git/images/server-login.png" />
  # If you do not see the login page, read [Troubleshooting Troubleshooting].
  # If you do see the login page, you can use any login name you want; this is the login for your development server, it does not have to match any real email address. 

Alternatively, because the command-line version has more options, you may wish to run the development server from your shell or command prompt. 

=== From a shell or command prompt ===

Open a shell or a command prompt. In the window:

  # Change directory to the one you specified as the path for your app.
  # Run the server with the following command:<br>{{{dev_appserver.py . }}}
  # As the command starts running, you may see some warnings you can ignore and questions you must answer. <br>Once the app is set up, you see a URL reference to the hostname and port you use to connect to your app from a web browser. Typically, this URL is {{{http://localhost:8080}}}, but the port number ({{{8080}}}) may be different.
  # Open a browser window and navigate to the URL. You should see the login page for the server (as shown above for a PC).
  # If you do not see the login page, read [Troubleshooting Troubleshooting].
  # If you do see the login page, you can use any login name you want; this is the login for your development server, it does not have to match any real email address. 

=== From a shell or command prompt, to enable remote access ===

By default, your app is only available from the machine on which you start it. To get access to your development server from another machine on the network, you need to request this through the command line. Start your development server with this command:

  {{{cd }}}_*{{{APPPATH}}}*_<br>
  {{{dev_appserver.py . -a 0.0.0.0}}}

where _*{{{APPPATH}}}*_ is the directory containing your app.

=== From a shell or command prompt, to clear lesson and unit data ===

Before you can put new or changed data into your data store, you must clear out the data that is already there. This is only necessary when you change either {{{data/lesson.csv}}} or {{{data/unit.csv}}}.

From a shell or command prompt simply start your development server with an extra argument:

  {{{cd }}}_*{{{APPPATH}}}*_<br>
  {{{dev_appserver.py --clear_datastore .}}}

where _*{{{APPPATH}}}*_ is the directory containing your app.

== Stop your development server ==

=== From the Launcher (PC, Mac) ===
If you started your development server from the Launcher, you can stop it there:

  # Select your app. 
  # When it's highlighted, click the *Stop* button to start the server (for that app). 

Once the icon to the left of the app name is gray, your development server is stopped.

=== From the Task Manager (PC) ===

If you started your server from a command prompt on a PC, bring up the Windows Task Manager. 

  # On the *Applications* tab, search for the task that looks like:<br>  {{{Command Prompt - dev_appserver.py .}}} 
  # Select the line for that task.
  # Click on *End Task*.

=== From a shell (Mac, Linux, or other POSIX-compliant system) ===
If you started your development server from a shell, you can stop it there:

Use the {{{ps}}} command to find the process number associated with your server and then to kill that server. 

  {{{ps x | grep dev_appserver}}}<br><br>
  <font color=green> {{{PID TTY TIME CMD}}} </font><br>
  <font color=green> {{{25603 ttys000    0:00.07 -bash}}} </font><br>
  <font color=green> {{{25993 ttys000    0:00.71 /Library/Frameworks/Python.framework/Versions/2.7/Resources/Python.app/Contents/MacOS/Python /usr/local/bin/dev_appserver.py .}}} </font><br>
  <br><br>
  {{{kill 25993}}}

== View the App Engine Admin Console ==

When App Engine starts your app, it also starts an associated Admin Console. If your app is available at {{{http://localhost:/8080}}}, its Admin Console is at {{{http://localhost:8080/_ah/admin}}}.

From the console, you can see and modify the content of your data store.

<img src="http://gcb-x-03141590.googlecode.com/git/images/admin-console.png" height=231 width=327 />

== Modify your app and see the effects ==

While working on your app, there are several places you can change information. Depending on the type and location of the information, either the changes you make take effect immediately, or you need to do something special to make them take effect. Common changes include:

  * *HTML:* Change HTML view files in the {{{views}}} directory.
  * *!JavaScript:* Change !JavaScript activity or assessment files in the {{{assets/js}}} directory.
  * *Image:* Change image files in the {{{assets/img}}} directory.
  * *CSV:* Change home page or lesson information in the files {{{data/unit.csv}}} or {{{data/lesson.csv}}}.

=== Changes to non-data files ===

Changes you make to the {{{views}}} directory or to either subdirectory under {{{assets}}} appear immediately in your development server. You do not have to stop or reload anything. Simply change the files and load (or reload) the corresponding page on your server.

=== Change to data files ===

When you  make changes to either file in the {{{data}}} directory, you have two choices:

  * Clear out all of the existing data and start afresh with your changes.<br>While this sounds drastic, it is the safer option. You only make your changes in the source code and then you reload those files. This way you're certain your code is in sync with your server.

  * Manually change only the parts of the data store that you changed in the data files.<br>You can use the Admin Console to remove or add individual records in either the Lesson or Unit store. This feels like a smaller change, but it requires you to enter the same information in two places, which can be error prone.

==== Reload all data ====

To clear and reload all data,  you need to stop your development server, restart it clearing out the old data, and then reload the new data.

  # Stopping your development server depends on how you started it:
    * If you started your server *from the Launcher*, go to the Launcher application and quit it.
    * If you started your server *from a command prompt on a PC*, bring up the Windows Task Manager and on the *Applications* tab, search for the task that looks like {{{Command Prompt - dev_appserver.py .}}} Select that task and click on *End Task*.
    * If you started  your server *from a shell on Mac, Linux, or other POSIX-compliant system*:<br><br>  {{{ps x | grep dev_appserver   # Find the process number}}}<br><br><font color=green> {{{30849 s000  S      0:00.85 /Library/Frameworks/Python.framework/Versions/2.7/Resources/Python.app/Contents/MacOS/Python /usr/local/bin/dev_appserver.py .}}} </font><br><font color=green> {{{30856 s000  R+     0:00.01 grep dev_appserver}}} </font><br> <br>{{{kill 30849}}}
  # Start your development server from the command line, clearing out the old data:<br><br>  {{{cd }}}_*{{{APPPATH}}}*_<br>  {{{dev_appserver.py --clear_datastore .}}} <br><br>where _*{{{APPPATH}}}*_ is the directory containing your app.
  # Start another command line and reload the changed data:  <br><br>  {{{cd }}}_*{{{APPPATH}}}*_{{{/data}}}<br><br>  {{{appcfg.py upload_data --url=http://localhost:}}}_*{{{PORT}}}*_{{{/_ah/remote_api --config_file=../bulkloader.yaml  --filename=unit.csv --kind=Unit}}}<br><br>  {{{appcfg.py upload_data --url=http://localhost:}}}_*{{{PORT}}}*_{{{/_ah/remote_api --config_file=../bulkloader.yaml  --filename=lesson.csv --kind=Lesson}}} <br><br>where _*{{{APPPATH}}}*_ is the directory containing your app and _*{{{PORT}}}*_ is your app's port number. You will be asked for your credentials (Google user name and password) twice, once for loading each data file.

==== Change some data ====

To change only some of the lesson or unit data, there are two steps:

  # Make the appropriate changes in the {{{data/lesson.csv}}} or  {{{data/unit.csv}}} file.
  # Visit the Admin Console.
  # From the *Entity Kind* drop down, choose whichever type of data you changed (Lesson or Unit).<br>A list of data appears.
  # (Optional) If you changed an existing piece of data, select the row containing that data and click on *Delete*.
  # Click on *Create New Entity* to add a new piece of data. Notice that you have to add the entire row over again, even if you're changing existing information.

The most common time to change some data is when you want to modify a *Unit* entity to reflect when units become available or unavailable. (See [CreateHomePage Create Home Page].)


== Troubleshooting ==

=== Development server won't start ===

If you do not see the registration page when you start your development server for the first time, there may be an error somewhere.

If you start your app from the command line, errors messages appear on the console. If you start your app from the Launcher, error messages appear in the logs. To see the logs, click on *Logs* in the Launcher's task bar.

One common problem is that, even though you downloaded Python 2.7, App Engine may not notice. In this case, the log says either that you are not running Python 2.7 or has warnings about using a runtime older that is than the production runtime.

In this situation, you need to manually specify the path for Python 2.7. To do so:
  # First, find out what that path is:
    # Open a shell or command prompt.
    # Run the command {{{which python}}}
    # Copy the path that appears (for example, {{{/Library/Frameworks/Python.framework/Versions/2.7/bin/python}}})
  # From the *!GoogleAppEngineLauncher* menu, choose *Preferences*.<br>A dialog box appears.
  # On the *Python Path* line, enter the path you found above.

=== Cannot connect to upload data ===

When you enter your credentials, you may get the following error:

  <font color=green> {{{urllib2.URLError: <urlopen error [Errno 61] Connection refused>}}} </font>

If you do, then you have forgotten to start your development server. 

== Official App Engine documentation ==

There's a lot of [https://developers.google.com/appengine/docs/python/config/appconfig#Required_Elements official documentation] for App Engine.

|| [https://groups.google.com/forum/?fromgroups#!categories/course-builder-forum/customize-and-deploy-course-builder-code Ask questions in the forum] ||