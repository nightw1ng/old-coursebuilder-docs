<h1>Get the Source Code</h1>

<font color=red><<At present, I stole the real AE intro tutorial. I'm in the process of modifying it to apply to getting a copy of CBE working.>>></font>

To create your own course, you download a zip file from Google Code that contains all of the files that constitute the Course Builder Experiment App Engine application. These files include almost everything needed to replicate the [http://www.powersearchingwithgoogle.com/ Power Searching with Google] course. You then load that code into a new App Engine app and modify it as needed.

This page describes how to download the source code and get it running as an app in App Engine.

If you are not familiar with App Engine, read [https://developers.google.com/appengine/docs/whatisgoogleappengine What is Google App Engine?]. You can also read [https://developers.google.com/academy/apis/cloud/appengine/intro/gettingstarted Getting Started] for more App Engine-related details about the process below.

In summary, the steps are:

<wiki:toc max_depth="2" />

== 1. Get the Course Builder Experiment code ==

To get the experimental code:
  # Download the zip file at <font color=red><<TODO some link>></font>.
  # Unzip that file and make a note of the directory to which it downloads. Let's assume that the directory is {{{CBE}}}.

== 2. Decide on a name for your app ==

The file {{{CBE/app.yaml}}} is the configuration file for your App Engine app. Before you get started, you need to choose a new name for the app. To do so:

  # Edit {{{CBE/app.yaml}}}.
  # Find the line that says {{{application: markf-searchedu}}} <font color=red><<TODO bet that's not the name they'll see>></font>
  # Change {{{markf-searchedu}}} to the name you choose for your app. 

Pick a single word as an app name. It's best if you keep all the letters of the app name in lowercase and select a directory/folder that does not have a space and does not have upper case characters in it. 

*Note:* Because your app will run in production<sup>1</sup>, you must choose a name that hasn't already been used by anybody else. Unfortunately, you only find out if the name you choose is available when you register the app with Google. You must register it before you can upload it. <font color=red><<TODO better point to somewhere that explains that.>></font>  

  <sup>1</sup> What does it mean for an app to run in production? In production, your app lives in Google datacenters. Google runs the production server. By default, your app automatically gets a domain name so that it can be reached from almost anywhere on the internet. That domain is of the form {{{APP_ID.appspot.com}}} where {{{APP_ID}}} is the app ID you chose. App ID names can only be used once and can never be returned to the pool of available names. Whether your app is running, not running, or deleted, once a name has been chosen, it can no longer be used by any other app. More details on creating an app can be found in the [https://developers.google.com/appengine/docs/python/gettingstartedpython27/uploading official docs]. 
  
Later, if you decide to customize your course, you may need more information on configuration. If you do, see the [https://developers.google.com/appengine/docs/python/config/appconfig#Required_Elements official documentation].

== 2. Download and install Python and App Engine ==

Make sure you have Python 2.7 on your system. Visit the general Python 2.7 [http://python.org/download download page] to get the right version for you. (Python 2.7.3 was the latest at the time of this writing.)

When developing on Google App Engine, you have a choice of performing administrative tasks using a graphical interface (GUI) or a traditional command-line interface. The GUI, called The Launcher, is available for users of PCs or Macs while command-line tools are available on any POSIX-based system such as Mac OS X or Linux. The 
Python App Engine SDK includes both tools. Follow [https://developers.google.com/appengine/downloads#Google_App_Engine_SDK_for_Python this link] to download the SDK for your platform.

  * *PC:* Run the downloaded installer .msi by doubleclicking. Follow all on-screen instructions. Once completed, you should find the App Engine Launcher icon on your desktop or be able to find it via Start -> Programs. There is no equivalent set of command-line tools for PCs, so there you must use the Launcher.
  * *Mac:* Open the downloaded .dmg file and drag the App Engine icon into the Applications folder. Optionally,  open the Applications folder and drag the App Engine icon to your Dock so that you can start the App Engine Launcher more conveniently. Putting App Engine int he Applications folder also installs the command-line tools.
  * *Linux or other POSIX-compliant system:* After downloading the .zip file, go to the directory where you want to install App Engine. When you unzip the archive, it creates a subdirectory named google_appengine. Add that directory to your shell's path so that it can find the command-line tools when you need them.

*Note:* Most of the rest of this page assumes that you use the Launcher to work with your app. If you decide to use the command-line tools, consult the official [https://developers.google.com/appengine/docs/python/overview App Engine documentation].

== 3. Start the App Engine Launcher (PC, Mac) ==

Activate the Launcher wherever it's available, that is, from the Desktop, the Dock, the Applications folder, Start -> Programs -> Google App Engine -> !GoogleAppEngineLauncher, and so on. 

== 4. Add the app to App Engine ==

  # In the App Engine Launcher, from the *File* menu, choose *Add Existing Application*. 
  # For the Path, navigate to the directory containing the source code you downloaded earlier.<br>Note that you choose a directory/folder for the path, not a particular file in the directory/folder.
  # For the Port, the default value is typically fine. If you have other apps running locally, you may need to change the port number.
  # Click on *Add*.

A new line appears in the launcher. Its name is the name you put in the {{{app.yaml}}} file. Its path is the path you specified here.

== 5. Start the development server ==

Before you can upload your app to run in production and be available to your audience, you need to develop and debug it in a more private setting. That more private setting is called either a *development server* or a *staging server*.

To start the development server from the Launcher:
  # Select your app. 
  # When it's highlighted, click the Run button to start the server (for that app). <br><br>Once the icon to the left of the app name is green, your server is ready to accept requests.

Because the command-line version has more options, you may wish to run the development server from your Unix shell. To do so:
  # Open a Unix shell.
  # Change directory to the one you specified as the path for your app
  # Run the server with the command<br>{{{dev_appserver.py .}}} <br>As the command runs, you may see some warnings you can ignore and questions you must answer.<br><br> Once the app is set up, you see a URL reference to the hostname and port you use to connect to your app from a web browser. It defaults to {{{http://localhost:8080}}}.<br><br>Notice that while the server is running, the command does not complete. To stop the server, exit the command.

By default, your app is only available from the machine on which you start it. To get access to your development server from another machine on the network, you need to request this through the command-line. To do so, do not run the server using the launcher. Instead, run your development server with this command

{{{
cd _PathToApplication_
$ dev_appserver.py . -a 0.0.0.0
}}}

== 6. Connect to the development server ==

Once your development servier is running, you access it through a web browser.

From the Launcher:
  # Click *Browser*.<br>A login window appears.
  # Accept the test email address and check *Sign in as Administrator*.
  # Click on *Login*.

From the command-line:
  # Open a web browser.
  # In the address bar, enter<br>{{{http://localhost:_port_}}}<br>where {{{_port_}}} is 8080 by default or whatever port you chose when adding the app in step 4.

In either case, you should see the registration page for the sample app. It looks something like this:

<img src="https://www.corp.google.com/~vpg/no_crawl/regscreen.png" />

<font color=red><<TODO fix image and then fix path>></font>

As you work on your app and modify the code, your changes are immediately reflected in the browser. You do not have to restart the server or do anything else to your app's configuration.

<font color=red><<TODO  this part probably will get broken off into its own page>></font>

== 7. (When you're ready) Upload your app to Google ==

*Do not do this step* until you are ready for your code to go live in production; that is, until you are ready for your audience to see your course.

If you want to see what this app looks like in production, you can upload it to Google. When traffic comes to your app, App Engine servers will start up an instance running your app and enable access to it via its default URL of _APP_ID_.appspot.com to handle requests. To get your app to Google, there are two main options: using the Launcher or command-line tool. (Be sure to have registered your app as we described earlier, otherwise you won't be able to upload your app.)

Using the Launcher is fairly straightforward: click on the "Deploy" button and enter your credentials. Using the command-line is almost as easy. You use the appcfg.py script along with the "update" command and the app's "home" directory (that contains the {{{app.yaml}}}, {{{main.py}}}, etc.). In the example below, we're already at home, so we use "." as the directory to upload. Here is what that experience should look like:

{{{
$ appcfg.py update .
    Application: _APP\_ID_; version: 1.
    Server: appengine.google.com.
    Scanning files on local disk.
    Initiating update.
    Email: _YOUR\_EMAIL_
    Password for _YOUR\_EMAIL_: *****
    Cloning 2 static files.
    Cloning 3 application files.
    Uploading 2 files and blobs.
    Uploaded 2 files and blobs
    Precompilation starting.
    Precompilation completed.
    Deploying new version.
    Checking if new version is ready to serve.
    Will check again in 1 seconds.
    Checking if new version is ready to serve.
    Will check again in 2 seconds.
    Checking if new version is ready to serve.
    Closing update: new version is ready to start serving. Uploading index definitions.
}}}

== Connect with the production server ==

It can take up to a minute to upload your app (generally it's less than 30 seconds but usually not more than a minute). Once the upload has been completed and confirmed, you (and everyone else on the planet not blocked from Google) should be able to visit http://_APP_ID_.appspot.com (depends on your _APP_ID_) and verify that your "Hello World" app is indeed available to all, just like in the Figure below.

<img alt="Hello World app live in production" src="https://developers.google.com/academy/apis/cloud/appengine/intro/images/image08.png" title="Figure 5: 'Hello World' running in production and live to the world!" />

*Figure 5*: "Hello World" app running in production and live to the world!

That's it! You just "wrote" and upload your first web app for Google App Engine! We can't wait to see what you do next! :-)

== Conclusion and review ==

*Q: What do you need in order to get started playing with Google App Engine?*<br>
A: You need to get the SDK from Google. Use [http://developers.google.com/appengine/downloads this downloads link] to get the one for your platform. The SDK comes with client libraries which you'll use to connect to the various App Engine APIs, a set of command-line tools for administration, and a development server. Mac and PC users also get a bonus: a GUI called the "Launcher" that gives a friendly interface to users and provides access to a subset of the command-line tool functionality.

*Q: How do you create your first App Engine app?*<br>
A: Either use the Launcher to create a new app which generates boilerplate code, or create it by-hand.

*Q: What is the development server and how do you start it?*<br>
A: The development server gives users a way to test their app during development. It runs locally allowing users to execute their app without being required to upload it to Google. You can start the development server either by pressing the "Run" button in the Launcher or use the {{{dev_appserver.py}}} command-line tool.

*Q: How do you upload your app to Google?*<br>
A: Similar to the previous question, you can either click the "Deploy" button in the Launcher or use the appcfg.py command-line tool.