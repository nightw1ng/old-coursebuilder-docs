#summary How to deploy your course code to Google production servers.

<h1>Deploy Your App to Google </h1>

During development, you primarily work on your course using your development server. (See [AppEngine Develop with App Engine] for information on using App Engine during development.)

When you are ready for final testing or to make your course available to students, it's time to deploy your app to Google's production servers. In production, your app lives in Google data centers. Google runs the production server containing your course.  At that point, people can access your course from its default URL of _*{{{APP_ID}}}*_{{{.appspot.com}}}, where  _*{{{APP_ID}}}*_ is the app name you register [#Register_your_app_with_Google Register below].

Once you deploy your app, it's more complicated to make changes to it than in development. For this reason, we suggest waiting until you think you're done to deploy your course.

The first time you deploy your app, there are three steps:

  # [#Register_your_app_with_Google Register your app with Google.]
  # [#Set_up_an_app-specific_password Set up an app-specific password.]
  # [#Upload_(or_deploy)_your_app Upload (or deploy) your app.]

If you make changes and need to redeploy parts of your app, follow the instructions in [#Modify_an_app_in_production Modify an app in production].

== Register your app (course) with Google ==

Before you can deploy (or upload) an application to Google, you must register that app with Google, by giving it a name.

When you register a name with Google, Google gives your app a domain name that corresponds to that name. Once registered and deployed, your course can be reached from almost anywhere on the Internet. The domain name Google uses is of the form _*{{{APP_ID}}}*_{{{.appspot.com}}}, where _*{{{APP_ID}}}*_ is the name you register. 

  <b>Note about names:</b> You must choose a name that hasn't already been used by anybody else.  App ID names can only be used once and can never be returned to the pool of available names. Whether your app is running, not running, or deleted, once a name has been chosen, it can no longer be used by any other app. 

To register your app:

  # You must have a Google account to register an App Engine app. If you do not have a Google account, you can [https://www.google.com/settings/account create a Google account] with an email address and password.
  # Once you have a Google account, start registration of your app in one of two ways:
    * From a web  browser, navigate to https://appengine.google.com/
    * From the App Engine Launcher, click on *Dashboard*. <br>Both of these get you to the same place.
  # If you are not currently logged in to your Google account, you see a login screen.
  # Once you login, you see your App Engine dashboard. If you've never worked on an App Engine app, your dashboard looks as follows:<br> <img src="https://www.corp.google.com/~vpg/no_crawl/cb/dashboard.png" />
  # Click on *Create Application* and follow the instructions for verifying your account. After this process, you see the new application screen:<br> <img src="https://www.corp.google.com/~vpg/no_crawl/cb/new-application.png" />
  # To create a new application, follow the instructions to register an application ID, a name unique to this application. If you elect to use the free appspot.com domain name, the full URL for the application will be {{{http://}}}_*{{{APP_ID}}}*_{{{.appspot.com/}}}. You can also purchase a top-level domain name for your app, or use one that you have already registered.


*Important:* The app ID you register for your app *must* be the app ID in your {{{app.yaml}}} file; see [GetCode#2._Decide_on_a_name_for_your_app Run the Sample App]. If you register a different ID than you use in development, you must change {{{app.yaml}}} before deploying your app.

More details on creating an app can be found in the [https://developers.google.com/appengine/docs/python/gettingstartedpython27/uploading official docs]. 


== Set up an app-specific password ==

Course Builder uses 2-step authentication to ensure the security of your courses. This means that to deploy your application, you do not provide the standard password that goes with your username. You instead supply a password that is specific to this application. See [http://support.google.com/accounts/bin/answer.py?hl=en&answer=185833 Signing in using application-specific passwords] for information on how to create your app-specific password.

Make a not of the password you generate. You'll need to use it several times in the next step.

== Upload (or deploy) your app ==

Once you register your app, the most straightforward way to deploy it is from a Unix command-line shell. From the shell:

  {{{$ cd }}}_*{{{APPPATH}}}*_<br>
  {{{$ appcfg.py update .}}}<br>
  {{{$ }}}<br>
  {{{$ cd data}}}<br>
  {{{$ appcfg.py upload_data --url=http://}}}_*{{{APP_ID}}}*_{{{.appspot.com/_ah/remote_api --config_file=../bulkloader.yaml  --filename=unit.csv --kind=Unit}}}<br>
  {{{$ appcfg.py upload_data --url=http://}}}_*{{{APP_ID}}}*_{{{.appspot.com/_ah/remote_api --config_file=../bulkloader.yaml  --filename=lesson.csv --kind=Lesson}}}

where _*{{{APP_ID}}}*_ is the app ID you registered for your app.

For each {{{appcfg.py}}} command, you are asked to supply your credentials. Supply your username and the app-specific password you created in the [#Set_up_an_app-specific_password previous step].

It can take up to a minute to deploy your app; generally it's less than 30 seconds but usually not more than a minute. Once the deployment completes and confirms, you (and everyone else on the planet not blocked from Google) can visit {{{http://}}}_*{{{APP_ID}}}*_{{{.appspot.com}}} and verify that your app is indeed available to all.

== (Alternative) Upload without a password ==

In general, every time you make a change that causes you to redeploy your app to production, you either need to remember the app-specific password created when registering or you need a new app-specific password. You may choose to avoid giving a password at all, by giving App Engine access to your account. 

Before you choose to do so, please read [https://developers.google.com/appengine/docs/python/tools/uploadinganapp#oauth Passwordless Login with OAuth2], so that you understand the risks involved.

To upload your application without supplying your credentials:

<font color=red><<TODO this doesn't work for me. The update does, but the upload_data lines still ask for credentials. I wonder what I'm doing wrong?>></font>

  {{{$ cd }}}_*{{{APPPATH}}}*_<br>
  {{{$ appcfg.py --oauth2 update .}}}<br>
  {{{$ }}}<br>
  {{{$ cd data}}}<br>
  {{{$ appcfg.py --oauth2 upload_data --url=http://}}}_*{{{APP_ID}}}*_{{{.appspot.com/_ah/remote_api --config_file=../bulkloader.yaml  --filename=unit.csv --kind=Unit}}}<br>
  {{{$ appcfg.py --oauth2 upload_data --url=http://}}}_*{{{APP_ID}}}*_{{{.appspot.com/_ah/remote_api --config_file=../bulkloader.yaml  --filename=lesson.csv --kind=Lesson}}}

where _*{{{APP_ID}}}*_ is the app ID you registered for your app.

== Modify an app in production ==

Once you deploy your app, modifying it in production is a little more complicated than modifying it on your development server.  However, sometimes you need to do so.

=== Modify !JavaScript or HTML files ===

You upload modifications to the content of assessments or activities (files in {{{assets/js/}}}) or the look of the various pages of your course (files in {{{views/}}}) in the same way that you uploaded those to production in the first place. That is, from a shell:

  {{{$ cd }}}_*{{{APPPATH}}}*_<br>
  {{{$ appcfg.py update .}}}

where _*{{{APP_ID}}}*_ is the app ID you registered for your app.

You are asked to supply your credentials. Supply your username and the app-specific password you created.  If you don't remember the app-specific password, [#Set_up_an_app-specific_password create another one].

=== Modify CSV files ===

Uploading modifications to the contents of the home page ({{{data/unit.csv}}}) or the definition of the lessons ({{{data/lesson.csv}}}) is trickier. Although it is several steps, the simplest way to do this and be certain that what you get is the same as what is on your development server is to clear out all of the existing data and then upload the data anew. 

If you want to change the lesson data, do the following:

  # From a web  browser, navigate to https://appengine.google.com/.
  # On the *My Applications* page, click on the name of your app. The dashboard for your app appears:<br> <img src="https://www.corp.google.com/~vpg/no_crawl/cb/prod-dashboard.png" /> 
  # In the left navigation, click on *Datastore Admin*. The first time you do this, a screen appears asking if you want to enable datastore administration options:<br> <img src="https://www.corp.google.com/~vpg/no_crawl/cb/datastore-enable.png" /> 
  # Click on *Enable Datastore Admin*. <br>You only need to do this step once.
  # The *Datastore Admin* page for your app appears. It's main area looks similar to the following:<br> <img src="https://www.corp.google.com/~vpg/no_crawl/cb/datastore-admin.png" /> 
  # Choose the check box in the *Lesson* row.
  # Click on *Delete Entities*.
  # A confirmation page appears. Click on *Delete Entities*. <br>The *Delete Job Status* page appears. <br> <img src="https://www.corp.google.com/~vpg/no_crawl/cb/delete-job-status.png" /> <br>Deleting the entities for your job should be very fast. The easiest way to check when the entities are gone is to return to the *Datastore Admin* page. Now all of the old lesson data is gone. 
  # To load the new data, repeat the steps you did to upload the data initially. From a Unix shell:<br>{{{$ cd }}}_*{{{APPPATH}}}*_{{{/data}}}<br>{{{$ appcfg.py upload_data --url=http://}}}_*{{{APP_ID}}}*_{{{.appspot.com/_ah/remote_api --config_file=../bulkloader.yaml  --filename=lesson.csv --kind=Lesson}}}<br>where _*{{{APP_ID}}}*_ is the app ID you registered for your app.<br>You are asked to supply your credentials. Supply your username and the app-specific password you created.  If you don't remember the app-specific password, [#Set_up_an_app-specific_password create another one].

Uploading new unit data uses the same procedure. Of course, for unit data, on the *Datastore Admin* page, you delete the *Unit* data. When you reload data, the {{{appcfg.py}}} command is:

  {{{$ appcfg.py upload_data --url=http://}}}_*{{{APP_ID}}}*_{{{.appspot.com/_ah/remote_api --config_file=../bulkloader.yaml  --filename=unit.csv --kind=Unit}}}<br>