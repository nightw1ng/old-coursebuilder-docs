<font color=red><<TODO Test Page: Under construction!!! >></font>

== Create a test server in production ==

You may want to test your course in the production environment before you make it publicly available. Rather than have a truly _private_ course in production, we have found it sufficient to have a separate _version_ of the course at a related, but unpublicized, URL. The key is that Google App Engine (GAE) allows versioning of your app and provides a separate URL for each version. (For details, see [https://developers.google.com/appengine/docs/python/runtime?hl=en#Requests_and_Domains Requests and Domains]).

Remember that if the name of your app is _*{{{MYCOURSE}}}*_, it's available at {{{http://}}}_*{{{MYCOURSE}}}*_{{{.appspot.com}}}. You can use the {{{version}}} field in {{{app.yaml}}} to create and deploy a second version of the app. In this situation, you get a separate URL for that version. For example, if you specify {{{version: latest}}}, that gets deployed to  {{{http://latest.}}}_*{{{MYCOURSE}}}*_{{{.appspot.com}}}.

One caveat: By default, all deployed versions of an app use the same datastore. That is, they all share the same {{{Lesson}}}, {{{Unit}}}, and {{{Student}}} entities. You can use different [https://developers.google.com/appengine/docs/python/multitenancy/overview?hl=en namespaces] to change this behavior, but that is probably overkill if you just want a test server before release of your course.

This section talks about details of creating separate "under construction" and "latest" versions of your course in production.

=== Create multiple versions ===

What does it mean to create versions of a GAE application?

When you load an application into GAE as described in [UploadCode#Upload_(or_deploy)_your_app Upload your app], it decides what application it is based on the {{{application}}} parameter in {{{app.yaml}}}. 

Assume you have two different directories, each of which contains code for a Course Builder course *and* each of their {{{app.yaml}}} files has the same value for the {{{application}}} parameter. If you run {{{appcfg.py upload}}} in both of these directories, GAE loads both applications to production.
  * GAE considers them the same application.
  * If the value of the {{{version}}} parameter is the same in both {{{app.yaml}}} files, then App Engine considers there to be only one version of the application and overwrites the first one loaded with the second one.
  * If the value of the {{{version}}} parameter is different in the {{{app.yaml}}} files, then App Engine considers there to be two versions of the application. The *first* one you upload is the default version. That version is available at {{{http://}}}_*{{{MYCOURSE}}}*_{{{.appspot.com}}} and at  {{{http://}}}_*{{{VERSION.MYCOURSE}}}*_{{{.appspot.com}}}, where _*{{{VERSION}}}*_ is the value of the {{{version}}} parameter. The non-default version is available only at {{{http://}}}_*{{{OTHERVERSION.MYCOURSE}}}*_{{{.appspot.com}}}, where _*{{{OTHERVERSION}}}*_ is the value of its {{{version}}} parameter.

Notice, by the way, that a version doesn't have to be a number; it can be any alphanumeric string (without spaces).

=== Change the default version ===

In its own, the first version of an application that is uploaded remains the default version (that is, the version you get when you simply enter {{{http://}}}_*{{{APPID}}}*_{{{.appspot.com}}}). Later versions do not automaically supercede it. You can change the default version yourself.

  # Visit http://appengine.google.com.
  # Choose your app.
  # Click on *Versions* in the left navigation.
  # Pick the radio button by the version you want to be the default.
  # Click on *Make Default*. 

=== Make "under construction" and "latest" versions ===



To create an "under construction" version as the default and a "latest" version as my working version, I did the following:
Make two directories that contain the sample app.
Edit the app.yaml file in each of them.
In the under construction version, specify vpgtest as the value of application and specify underconstruction as the value of version.
In the version I'll work in, specify vpgtest as the value of application and specify latest as the value of version.
In underconstruction,
Replace the entire contents of views/course.html with
<html><body>Really under construction.</body></html>
Replace the text in views/register.html with
Under construction.
In latest, actually work on my course.
Upload both versions to production, making underconstruction the default one as described above.
Et voila.


=== Restrict access to your course ===

Any time someone comes to any URL in your course, code figures out if they're already registered. If not, they are sent to the registration page. 
The RegisterHandler class (defined in controllers/utils.py) handles the registration page.

Before rendering the registration page, the RegisterHandler's get method checks to see if the person is already registered.
If they are registered, they are redirected to the course's home page.
If they are not registered, they are shown the registration page.

Instead of immediately showing the registration page, you can add some logic to that method that checks whether or not the person is on the whitelist. 
(You can simply code the whitelist as a fiel containing a list of email addresses.) 
If the person is on the whitelist, send them to registration. If not, render a different page that says "Sorry. Course closed." or something like that.

=== Hide your course from Google ===

You can add a {{{robots.txt}}} file to your application by modifying {{{app.yaml}}}. In that file, the handlers section looks like this:

{{{
handlers:
- url: /remote_api
  script: $PYTHON_LIB/google/appengine/ext/remote_api/handler.py
  login: admin
- url: /favicon.ico
  static_files: assets/img/favicon.ico
  upload: assets/img/favicon.ico
- url: /assets
  static_dir: assets
- url: /.*
  script: main.app
  login: required
}}}

Add a new section to this file:

{{{
- url: /robots.txt
  static_files: robots.txt
  upload: robots.txt
}}}

Then write the {{{robots.txt}}} file to have your files not indexed. When you release the course, remember to change {{{robots.txt}}} so that the files are indexed.