#summary Describes course data and how to download (export) your course data.

<h1>Download Course Data</h1>

The Course Builder application stores data in Google App Engine’s [https://developers.google.com/appengine/docs/python/datastore/structuring_for_strong_consistency High Replication datastore]. You can download (export) data either from your development or production server. The steps are the same. The only difference is that when you download data from your production server, you need to use your app-specific password, as described in [UploadCode#Set_up_an_app-specific_password Set up an app-specific password].

With download and [ImportCourseData upload], your data becomes accessible, portable, and liberated from any one system. Some reasons you may want to use this feature are:

  * Download current data so that you can import it into a new version of Course Builder.
  * Download data so that you can import into some third party system.
  * Download data so you can edit it in some custom way.
  * Download data "just so that you can have it with you."

You cannot download courses that you made with Course Builder versions earlier than 1.3.0. You would most likely have these courses on disk and hence would not need to download them from the datastore.

<wiki:toc max_depth="2" />

== Types of data available ==
Course Builder stores two types of data: course and datastore. 

=== Course data ===
You can find course data on your file system. Examples of course data include:

  * Assets — course CSS files, images, activities, assessments, and libraries
  * !EventEntity — system level events and historical data about each activity or assessment completed. Event recording is off by default and can be enabled in *Admin > Settings*
  * Lessons — information about each lesson, such as the video's URL and the lesson's title
  * Student — information about students, their enrollment status and assessment scores
  * !StudentAnswersEntity — the most recent detailed answers given by a student for each assessment
  * Units — course unit information like ID, type, title, release date, and availability

=== Datastore data ===
Datatsore data resides in the Google App Engine datastore. Examples include:

  * Student
  * !StudentAnswersEntity
  * !StudentPropertyEntity 

== Path settings ==
The best way to download and upload data is to create a Python script that calls {{{etl.py}}}. This way, you do not have to touch the source code directly. You must specify correct path settings for the following items. Otherwise, neither download nor upload will not work:

  * The absolute path of your Course Builder installation.
  * The absolute path of your App Engine SDK.
  * The absolute paths of third party libraries from the SDK used by Course Builder:
    * fancy_urllib
    * jinja2
    * webapp2
    * webob

Paths to the various necessary items are different on each platform (Mac, Windows 7, Linux).

=== Mac path settings ===
Create a Python script that defines all the paths and then calls {{{etl.py}}}. At the end of the steps is an example of what the script would look like.

  # Create a new file in a plain text editor like vi, Text!Wrangler, or the like.
  # Import the Python {{{sys}}} module by typing this on the first line: {{{import sys}}}
  # Specify all the paths using Python's {{{sys.path.insert()}}}.
  # Import the argparse module: {{{import argparse}}}
  # Import Course Builder's {{{etl.py}}}: {{{import etl}}}
  # Add code to wrap the command line argument parser of {{{etl.py}}}.
  # Save the file with the {{{.py}}} extension. You must save this file to {{{/tools/etl}}}.

Here is an example of a completed Python script. The coursebuilder installation is in a directory called {{{/Users/sammich/coursebuilder}}}.

{{{
import sys
sys.path.insert(0,'/Users/sammich/coursebuilder')
sys.path.insert(0,'/Applications/GoogleAppEngineLauncher.app/Contents/Resources/GoogleAppEngine-default.bundle/Contents/Resources/google_appengine')
sys.path.insert(0,'/Applications/GoogleAppEngineLauncher.app/Contents/Resources/GoogleAppEngine-default.bundle/Contents/Resources/google_appengine/lib/fancy_urllib')
sys.path.insert(0,'/Applications/GoogleAppEngineLauncher.app/Contents/Resources/GoogleAppEngine-default.bundle/Contents/Resources/google_appengine/lib/jinja2-2.6')
sys.path.insert(0,'/Applications/GoogleAppEngineLauncher.app/Contents/Resources/GoogleAppEngine-default.bundle/Contents/Resources/google_appengine/lib/webapp2-2.5.2')
sys.path.insert(0,'/Applications/GoogleAppEngineLauncher.app/Contents/Resources/GoogleAppEngine-default.bundle/Contents/Resources/google_appengine/lib/webob-1.2.3')
sys.path.insert(0,'/Applications/GoogleAppEngineLauncher.app/Contents/Resources/GoogleAppEngine-default.bundle/Contents/Resources/google_appengine/lib/yaml/lib')

import argparse
import etl
if __name__ =='__main__':
    PARSER = argparse.ArgumentParser(add_help=False, parents=[etl.PARSER])
    etl.main(PARSER.parse_args())
}}}

We named the script {{{gcbpaths.py}}} and saved it in {{{tools/etl}}}. Now the directory will have both {{{etl.py}}} and {{{gcbpaths.py}}}.
    
=== Windows path settings ===
The steps for Windows is the same as that of [ExportCourseData#Mac_path_settings Mac]. The difference is the paths are different. Follow the steps for Mac but add the paths in your Windows environment. For example, your script may look like this:
{{{
import sys
sys.path.insert(0,'C:\coursebuilder')
sys.path.insert(0,'C:\coursebuilder\google_appengine')
sys.path.insert(0,'C:\coursebuilder\google_appengine\lib')
sys.path.insert(0,'C:\coursebuilder\google_appengine\lib\jinja2-2.6')
sys.path.insert(0,'C:\coursebuilder\google_appengine\lib\webapp2-2.5.2')
sys.path.insert(0,'C:\coursebuilder\google_appengine\lib\webob-1.2.3')
sys.path.insert(0,'C:\coursebuilder\google_appengine\lib\yaml\lib')

import argparse
import etl
if __name__ =='__main__':
    PARSER = argparse.ArgumentParser(add_help=False, parents=[etl.PARSER])
    etl.main(PARSER.parse_args())
}}}

Notice that the specification for the {{{fancy_urllib}}} library omits the directory name at the end of the path.

=== Linux path settings ===
The steps for Linux is the same as that of [ExportCourseData#Mac_path_settings Mac]. The difference is the paths are different. Follow the steps for Mac but add the paths in your Linux environment. For example, you script may look like this:
{{{
import sys
sys.path.insert(0,'/usr/local/myorg/home/sammich/coursebuilder')
sys.path.insert(0,'/usr/local/myorg/home/sammich/google_appengine')
sys.path.insert(0,'/usr/local/myorg/home/sammich/google_appengine/lib/fancy_urllib')
sys.path.insert(0,'/usr/local/myorg/home/sammich/google_appengine/lib/jinja2-2.6')
sys.path.insert(0,'/usr/local/myorg/home/sammich/google_appengine/lib/webapp2-2.5.2')
sys.path.insert(0,'/usr/local/myorg/home/sammich/google_appengine/lib/webob-1.2.3')
sys.path.insert(0,'/usr/local/myorg/home/sammich/google_appengine/lib/yaml/lib')

import argparse
import etl
if __name__ =='__main__':
    PARSER = argparse.ArgumentParser(add_help=False, parents=[etl.PARSER])
    etl.main(PARSER.parse_args())
}}}

== Download course information ==
When you download the course information, some files will be in !JavaScript Object Notation ([http://www.json.org/ JSON]), which is a data-interchange format that is human readable.  JSON is computer language independent.

The following command downloads your course data. ETL stands for "Extract, Transform, Load."

{{{
python tools/etl/<your_script_name>.py download course <course_url_prefix> <app_name> <app_server_name> --archive_path <archive_path>
}}}

In our example above, we named our script {{{gcbpaths.py}}}, which calls {{{etl.py}}}. Here is the description of the {{{etl.py}}} command.

|| *Options and Arguments* || *Description* ||
|| -h || Get help on the {{{etl.py}}} command. ||
|| --archive_path || The path and filename of the exported files, which will be compressed. ||
|| --batch_size || Specifies the number of results to attempt to retrieve per batch. ||
|| --datastore_types || When the type is {{{datastore}}}, this option specifies a comma-separated list of datastore model types to process. All models are processed by default.  Models are Google app engine db.Model subclass instances. They contain the data in the app's datastore. You can tell which type a model is by its name in the datastore. ||
|| --job_args ||  ||
|| --log_level {DEBUG,ERROR,INFO,WARNING} || Choose one error level. Specifies the log file messaging level. ||
|| download, run, upload || Choose either {{{download}}}, {{{run}}}, or {{{upload}}}. Download will download (export) files out of Course Builder. Upload will upload (import) files into Course Builder. ||
|| type || Choose either {{{course}}} or {{{datastore}}}. Specifies the "type" you are downloading. ||
|| course_url_prefix || The URL where the lesson is located. ||
|| application_id || The name of your app. ||
|| server || The fullname of the server that is hosting your app. ||

It is best to use this command from the root of your Course Builder installation. In the following example, the Course Builder installation is at {{{/Users/sammich/coursebuilder}}}:
  # {{{cd /Users/sammich/coursebuilder}}}
  # {{{python tools/etl/gcbpaths.py download course /physics zabaione zabaione.appspot.com --archive_path ./physics.zip}}}

You would see a file called {{{physics.zip}}} in the current directory, {{{/Users/sammich/coursebuilder}}}.

Although you should feel free to view and make copies of data exported from Course Builder, you should not edit them if you want to load them back into Course Builder. If you do, you may receive an immediate upload error or pass uploading and create downstream errors that you must troubleshoot on your own. If you want to upload data back into Course Builder, you must upload exactly what you downloaded.

== Download datastore information ==
The following command exports information, like student data, from the datastore:

{{{
python tools/etl/gcbpaths.py download datastore <course_url_prefix> <app_name> <app_server_name> --archive_path <archive_path> --datastore_types <model1,model2>
}}}

It is best to use this command from the root of your Course Builder installation. In the following example, the Course Builder installation is at {{{/Users/sammich/coursebuilder}}} and the command downloads student information:
  # {{{cd /Users/sammich/coursebuilder}}}
  # {{{python tools/etl/gcbpaths.py download datastore /poetry bbq bbq.appspot.com --archive_path ./poetry.zip --datastore_types Student}}}

You would see a file called {{{poetry.zip}}} in the current directory, {{{/Users/sammich/coursebuilder}}}. You can also download multiple models:

{{{python tools/etl/gcbpaths.py download datastore /poetry bbq bbq.appspot.com --archive_path ./poetry.zip --datastore_types Student,StudentAnswersEntity}}}

== Consider time and costs ==

Usually, the course file will have a fairly small amount of data. Also, the amount of data does not change based on course enrollment.

Student entities, however, are different. If your course has a very large number of students, the exporting of data can take hours to run and may incur [https://developers.google.com/appengine/docs/billing Google App Engine costs]. Also note that even if your data is relatively small in size, frequent downloads could also incur costs.


|| [https://groups.google.com/forum/?fromgroups#!categories/course-builder-forum/evaluate-course-efficacy Ask questions in the forum] ||