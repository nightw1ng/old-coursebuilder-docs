#summary How to download the sample code and get started with Google App Engine.

<h1>Run the Sample App</h1>

Once you've downloaded the sample application, you load that code into a new Google App Engine app and modify it as needed for your course. This page describes how to get the sample app running for the first time on Google App Engine. The basic steps are:

<wiki:toc max_depth="2" />

*Note:* To run the sample application successfully, you *must* follow the steps on this page.

== 1. Start the Google App Engine Launcher (PC, Mac) ==

Activate the Launcher wherever it's available, that is, from the Desktop, the Dock, the Applications folder, Start -> Programs -> Google App Engine -> !GoogleAppEngineLauncher, and so on. 

The first time you start the Launcher on Mac, you may see a dialog box asking you about symbolic links:

<img src="http://wiki.course-builder.googlecode.com/git/images/symlinks.png" />

For Google App Engine to work, you must agree to set up symbolic links.

For more information about working with Google App Engine, see [AppEngine Develop with Google App Engine].

== 2. Decide on a name for your app ==

The file {{{app.yaml}}} is the configuration file for your Google App Engine app. Before you get started, you need to choose a new name for the app. To do so:

  # Edit {{{app.yaml}}}. The first line is:<br>{{{  application: mycourse # FIXME: Put your application id here}}}
  # Replace {{{mycourse}}} with the name you choose for your app. 

*Note for PC users:* Do *not* use Notepad to edit Course Builder files. If you do, every Course Builder file appears to be one long line. Please use another text editor, such as !WordPad.

Pick a single word as an app name. It's best if you keep all the letters of the app name in lowercase and select a directory that does not have a space and does not have upper case characters in it. See [UploadCode#Register_your_app_(course)_with_Google Register your app with Google] for restrictions on naming.

*Note:* During development, you can give your app any name you want. However, when you release your app to production, as described in [UploadCode#Register_your_app_(course)_with_Google Register your app with Google], you name your production app once and can never reuse that name. 

Later, if you decide to customize your course, you may need more information on configuration. If you do, see the [https://developers.google.com/appengine/docs/python/config/appconfig#Required_Elements official documentation].

== 3. Start the Google App Engine Launcher == 

Download Google App Engine as described in [Download Download the Software]. Then...

Activate the Launcher wherever it's available, that is, from the Desktop, the Dock, the Applications folder, Start -> Programs -> Google App Engine -> !GoogleAppEngineLauncher, and so on. 

== 4. Add the app to Google App Engine ==

  # In the Google App Engine Launcher, from the *File* menu, choose *Add Existing Application*. 
  # For the Path, navigate to the directory containing the source code you downloaded in the first step.<br>Note that you choose a directory for the path, not a particular file in the directory.
  # For the Port, the default value is typically fine. If you have other apps running locally, you may need to change the port number.
  # Click on *Add*.

A new line appears in the Launcher. Its name is the name you put in the {{{app.yaml}}} file. Its path is the path you specified here.

(Optional) While developing your application, you may frequently need to reload course data. (This step is discussed below in [#6._Upload_the_unit_and_lesson_data 6. Upload the unit and lesson data].) When you do that, you also need to remove any old data. If you think you'll be changing units and lessons frequently, you can tell the Launcher to remove this data every time you restart the application. To do so:

  # In the Google App Engine Launcher, double-click the line containing your application. <br>The *Settings* dialog box appears.
  # In the *Launch Settings* area, choose *Clear datastore on launch*.
  # Click on Update.

Now, any time you restart the application, you must reload the data, as described [#6._Upload_the_unit_and_lesson_data here].


== 5. Start the development server ==

Before you can deploy your app to run in production and be available to your audience, you need to develop and debug it in a more private setting. That more private setting is called a *development server*.

==== From the Launcher (PC, Mac) ====

To start the development server from the Launcher:
  # Select your app. 
  # When it's highlighted, click the *Run* button to start the server (for that app). <br>Once the *Browse* button is enabled, your server is ready to accept requests.
  # Click on the *Browse* button to visit the app in a web browser.<br>If you are not logged in to the development server, you should see the login page for the server.<br> <img src="http://wiki.course-builder.googlecode.com/git/images/server-login.png" /><br>If you have previously logged in to the development server, you may see the registration page or the home page for the sample course.
  # If you do not see one of these pages, read [AppEngine#Troubleshooting Troubleshooting].
  # If you see the login page, you can use any login name you want; this is the login for your development server, it does not have to match any real email address. 

From the Launcher, you stop your server by clicking on the *Stop* button. For more information, see [AppEngine#Stop_your_server Stop your server].

==== From a shell or command prompt ====

(Asking yourself: [http://code.google.com/p/gcb-x-03141590/wiki/FAQ#What%27s_a_%22shell_or_command_prompt%22? What's a "shell or command prompt"?])

Because the command-line version has more options, you may wish to run the development server from your shell or command prompt. To do so:
  # Open a shell or command prompt.
  # Change directory to the one you specified as the path for your app.
  # Run the server with the following command:<br>{{{dev_appserver.py . }}}<br>_Note that the period at the end of that command is necessary._
  # As the command starts running, you may see some warnings you can ignore and questions you must answer. <br>Once the app is set up, you see a URL reference to the hostname and port you use to connect to your app from a web browser. Typically, this URL is {{{http://localhost:8080}}}, but the port number ({{{8080}}}) may be different.
  # Open a browser window and navigate to the URL. You should see the login page for the server (as shown above for a PC).
  # If you do not see the login page, read [AppEngine#Troubleshooting Troubleshooting].
  # If you do see the login page, you can use any login name you want; this is the login for your development server, it does not have to match any real email address. 

By default, your app is only available from the machine on which you start it. To get access to your development server from another machine on the network, you need to request this through the command line. To do so, do not run the server using the Launcher. Instead, run your development server with these commands:

  {{{cd }}}_*{{{APPPATH}}}*_<br>
  {{{dev_appserver.py -a 0.0.0.0 .}}}

where _*{{{APPPATH}}}*_ is the directory containing your app. _Note that the period at the end of the second command is necessary._

<a name="uploaddata"></a>

== 6. Connect to the development server ==

Once your development server is running, you access it through a web browser.

From the Launcher:
  # Click *Browse*.<br>A login window appears.
  # Accept the test email address.
  # Click on *Login*.

From the command-line:
  # Open a web browser.
  # In the address bar, enter<br>{{{http://localhost:}}}_*{{{PORT}}}*_<br>where _*{{{PORT}}}*_ is 8080 by default or whatever port you chose when adding the app in step 4.

In either case, you should see the registration page for the sample app:

<img src="http://wiki.course-builder.googlecode.com/git/images/registration.png" />

|| [https://groups.google.com/forum/?fromgroups#!categories/course-builder-forum/customize-and-deploy-course-builder-code Ask questions in the forum] ||