#summary How to download the sample code and get started with App Engine.

<h1>Run the Sample App</h1>

Once you've downloaded the sample application, you load that code into a new App Engine app and modify it as needed for your course. This page describes how to get the sample app running for the first time on App Engine. The basic steps are:

<wiki:toc max_depth="2" />

== 1. Start the App Engine Launcher (PC, Mac) ==

Activate the Launcher wherever it's available, that is, from the Desktop, the Dock, the Applications folder, Start -> Programs -> Google App Engine -> !GoogleAppEngineLauncher, and so on. 

The first time you start the Launcher, you may see a dialog box asking you about symbolic links:

<img src="http://gcb-x-03141590.googlecode.com/git/images/symlinks.png" />

For App Engine to work, you must agree to set up symbolic links.

For more information about working with App Engine, see [AppEngine Develop with App Engine].

== 2. Decide on a name for your app ==

The file {{{app.yaml}}} is the configuration file for your App Engine app. Before you get started, you need to choose a new name for the app. To do so:

  # Edit {{{app.yaml}}}. The first line is:<br>{{{  application: mycourse # FIXME: Put your application id here}}}
  # Replace {{{mycourse}}} with the name you choose for your app. 

*Note for Windows uesrs:* Do *not* use Notepad to edit Course Builder files. If you do, every Course Builder file appears to be one long line. Please use another text editor, such as !WordPad.

Pick a single word as an app name. It's best if you keep all the letters of the app name in lowercase and select a directory that does not have a space and does not have upper case characters in it. See [UploadCode#Register_your_app_(course)_with_Google Register your app with Google] for restrictions on naming.

*Note:* During development, you can give your app any name you want. However, when you release your app to production, as described in [UploadCode#Register_your_app_(course)_with_Google Register your app with Google], you name your production app once and can never reuse that name. 

Later, if you decide to customize your course, you may need more information on configuration. If you do, see the [https://developers.google.com/appengine/docs/python/config/appconfig#Required_Elements official documentation].

== 3. Start the App Engine Launcher == 

Download App Engine as described in [Download Download the Software]. Then...

Activate the Launcher wherever it's available, that is, from the Desktop, the Dock, the Applications folder, Start -> Programs -> Google App Engine -> !GoogleAppEngineLauncher, and so on. 

== 4. Add the app to App Engine ==

  # In the App Engine Launcher, from the *File* menu, choose *Add Existing Application*. 
  # For the Path, navigate to the directory containing the source code you downloaded in the first step.<br>Note that you choose a directory for the path, not a particular file in the directory.
  # For the Port, the default value is typically fine. If you have other apps running locally, you may need to change the port number.
  # Click on *Add*.

A new line appears in the Launcher. Its name is the name you put in the {{{app.yaml}}} file. Its path is the path you specified here.

== 5. Start the development server ==

Before you can deploy your app to run in production and be available to your audience, you need to develop and debug it in a more private setting. That more private setting is called a *development server*.

==== From the Launcher (PC, Mac) ====

To start the development server from the Launcher:
  # Select your app. 
  # When it's highlighted, click the *Run* button to start the server (for that app). <br>Once the round icon to the left of the app name is green and contains a right-facing triangle, your server is ready to accept requests.
  # Click on the *Browse* button to visit the app in a web browser.<br>You should see the login page for the server.<br> <img src="http://gcb-x-03141590.googlecode.com/git/images/server-login.png" />
  # If you do not see the login page, read [AppEngine#Troubleshooting Troubleshooting].
  # If you do see the login page, you can use any login name you want; this is the login for your development server, it does not have to match any real email address. 

From the Launcher, you stop your server by clicking on the *Stop* button. For more information, see [AppEngine#Stop_your_server Stop your server].

==== From a shell (Mac, Linux) or command prompt (Windows) ====

Because the command-line version has more options, you may wish to run the development server from your Unix shell or Windows command prompt. To do so:
  # Open a Unix shell or Windows command prompt.
  # Change directory to the one you specified as the path for your app.
  # Run the server with the following command:<br>{{{$ dev_appserver.py . }}}<br><br>(Do not type the {{{$}}} because it indicates the prompt at the start of a command line.) 
  # As the command starts running, you may see some warnings you can ignore and questions you must answer. <br>Once the app is set up, you see a URL reference to the hostname and port you use to connect to your app from a web browser. Typically, this URL is {{{http://localhost:8080}}}, but the port number ({{{8080}}}) may be different.
  # Open a browser window and navigate to the URL. You should see the login page for the server (as shown above for Windows).
  # If you do not see the login page, read [AppEngine#Troubleshooting Troubleshooting].
  # If you do see the login page, you can use any login name you want; this is the login for your development server, it does not have to match any real email address. 

By default, your app is only available from the machine on which you start it. To get access to your development server from another machine on the network, you need to request this through the command line. To do so, do not run the server using the Launcher. Instead, run your development server with this command

  {{{$ cd }}}_*{{{APPPATH}}}*_<br>
  {{{$ dev_appserver.py -a 0.0.0.0 .}}}

where _*{{{APPPATH}}}*_ is the directory containing your app.

== 6. Upload the unit and lesson data ==

Before you can run the sample code, you need to upload the data files that represent the units and lessons of the course. (Basically, two CSV files contain the information the code needs to find all of the information pertaining to the units and lessons.)

To upload the data, first make sure that your development server is running (as described in step 5). 

Then, open a new Unix shell or command prompt. In that window:

  {{{$ cd }}}_*{{{APPPATH}}}*_{{{/data}}}<br>
  {{{$ appcfg.py upload_data --url=http://localhost:}}}_*{{{PORT}}}*_{{{/_ah/remote_api --config_file=../bulkloader.yaml  --filename=unit.csv --kind=Unit}}}<br>
  {{{$ appcfg.py upload_data --url=http://localhost:}}}_*{{{PORT}}}*_{{{/_ah/remote_api --config_file=../bulkloader.yaml  --filename=lesson.csv --kind=Lesson}}}

where _*{{{APPPATH}}}*_ is the directory and _*{{{PORT}}}*_ is the port number you specified in step 4.
Before running each {{{appcfg.py}}} command, the system prompts you to enter your credentials. Your credentials are your Google account name and password. 

If you have trouble with these commands, see [AppEngine#Troubleshooting Troubleshooting].

To learn how to upload data again after making changes, see [AppEngine#Modify_your_app_and_see_the_effects Modify your app and see the effects].

== 7. Connect to the development server ==

Once your development server is running, you access it through a web browser.

From the Launcher:
  # Click *Browse*.<br>A login window appears.
  # Accept the test email address.
  # Click on *Login*.

From the command-line:
  # Open a web browser.
  # In the address bar, enter<br>{{{http://localhost:}}}_*{{{PORT}}}*_<br>where _*{{{PORT}}}*_ is 8080 by default or whatever port you chose when adding the app in step 4.

In either case, you should see the registration page for the sample app:

<img src="http://gcb-x-03141590.googlecode.com/git/images/registration.png" />

*Next step:* [ExplorePS Explore the Sample App]