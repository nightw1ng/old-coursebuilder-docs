
#summary How to download the sample code and get started with App Engine.

<h1>Get Started with the Sample App</h1>

To create your own course, you download a zip file from Google Code that contains all of the files that constitute the Course Builder App Engine application.  You then load that code into a new App Engine app and modify it as needed. This page describes how to download the source code and get it running as an app in App Engine. The basic steps are:

<wiki:toc max_depth="2" />


== 1. Get the Course Builder code ==

To get the experimental code:
  # Download the zip file at <font color=red><<TODO some link>></font>.
  # Unzip that file and make a note of the directory to which it downloads. 

All pathnames in this page are relative to that directory.

== 2. Decide on a name for your app ==

The file {{{app.yaml}}} is the configuration file for your App Engine app. Before you get started, you need to choose a new name for the app. To do so:

  # Edit {{{app.yaml}}}. The first line is:<br>{{{  application: mycourse # FIXME: Put your application id here}}}
  # Replace {{{mycourse}}} with the name you choose for your app. 

Pick a single word as an app name. It's best if you keep all the letters of the app name in lowercase and select a directory that does not have a space and does not have upper case characters in it. See [AppEngine#Name_your_app_for_production Name your app for production] for restrictions on naming.
  
Later, if you decide to customize your course, you may need more information on configuration. If you do, see the [https://developers.google.com/appengine/docs/python/config/appconfig#Required_Elements official documentation].

== 3. Start the App Engine Launcher == 

Download App Engine as described in [DevEnvironment Set Up Your Development Environment]. Then...

Activate the Launcher wherever it's available, that is, from the Desktop, the Dock, the Applications folder, Start -> Programs -> Google App Engine -> !GoogleAppEngineLauncher, and so on. 

== 4. Add the app to App Engine ==

  # In the App Engine Launcher, from the *File* menu, choose *Add Existing Application*. 
  # For the Path, navigate to the directory containing the source code you downloaded in the first step.<br>Note that you choose a directory for the path, not a particular file in the directory.
  # For the Port, the default value is typically fine. If you have other apps running locally, you may need to change the port number.
  # Click on *Add*.

A new line appears in the Launcher. Its name is the name you put in the {{{app.yaml}}} file. Its path is the path you specified here.

== 5. Start the development server ==

Before you can upload your app to run in production and be available to your audience, you need to develop and debug it in a more private setting. That more private setting is called a *development server*.

To start the development server from the Launcher:
  # Select your app. 
  # When it's highlighted, click the Run button to start the server (for that app). <br>Once the icon to the left of the app name is green, your server is ready to accept requests.

Because the command-line version has more options, you may wish to run the development server from your Unix shell. To do so:
  # Open a Unix shell (command line).
  # Change directory to the one you specified as the path for your app
  # Run the server with the command<br><br>{{{$ dev_appserver.py . &}}}

(Do not type the {{{$}}}; this is the prompt at the start of a command line.) The {{{&}}} tells Unix to run this command in the background, so you can continue to use that shell while the command runs.

As the command starts running, you may see some warnings you can ignore and questions you must answer. Once the app is set up, you see a URL reference to the hostname and port you use to connect to your app from a web browser. It defaults to {{{http://localhost:8080}}}. 

By default, your app is only available from the machine on which you start it. To get access to your development server from another machine on the network, you need to request this through the command line. To do so, do not run the server using the Launcher. Instead, run your development server with this command

  {{{$ cd }}}_*{{{APPPATH}}}*_<br>
  {{{$ dev_appserver.py -a 0.0.0.0 . &}}}

where _*{{{APPPATH}}}*_ is the directory containing your app.

If you do not see the registration page, read [AppEngine#Troubleshooting Troubleshooting].

To learn how to stop the server, see [AppEngine#Stop_your_server Stop your server].

== 6. Upload the unit and lesson data ==

Before you can run the sample code, you need to upload the data files that represent that units and lessons of the course. (Don't worry too much about what this means right now; we'll explain in  [ExplorePS Explore the Sample Code].)

To upload the data, first make sure that your development server is running (as described in step 5). Then, open a Unix shell. In that shell:

  {{{$ cd }}}_*{{{APPPATH}}}*_{{{/data}}}<br>
  {{{$ appcfg.py upload_data --url=http://localhost:}}}_*{{{PORT}}}*_{{{/_ah/remote_api --config_file=../bulkloader.yaml  --filename=unit.csv --kind=Unit}}}<br>
  {{{$ appcfg.py upload_data --url=http://localhost:}}}_*{{{PORT}}}*_{{{/_ah/remote_api --config_file=../bulkloader.yaml  --filename=lesson.csv --kind=Lesson}}}

where _*{{{APPPATH}}}*_ is the directory and _*{{{PORT}}}*_ is the port number you specified in step 4.
Before running each {{{appcfg.py}}} command, the system prompts you to enter your credentials. Your credentials are your Google account name and password. 

If you have trouble with these commands, see [AppEngine#Troubleshooting Troubleshooting].

To learn how to reupload data after making changes, see [AppEngine#Modify_your_app_and_see_the_effects Modify your app and see the effects].

== 7. Connect to the development server ==

Once your development server is running, you access it through a web browser.

From the Launcher:
  # Click *Browser*.<br>A login window appears.
  # Accept the test email address and check *Sign in as Administrator*.
  # Click on *Login*.

From the command-line:
  # Open a web browser.
  # In the address bar, enter<br>{{{http://localhost:}}}_*{{{PORT}}}*_<br>where _*{{{PORT}}}*_ is 8080 by default or whatever port you chose when adding the app in step 4.

In either case, you should see the registration page for the sample app:

<img src="https://www.corp.google.com/~vpg/no_crawl/cb/registration.png" />

*Next step:* [ExplorePS Explore the Sample Application]