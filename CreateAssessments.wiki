#summary How to create assessments (graded tests) for your course.

<h1>Create Assessments</h1>

<font color=red><<TODO to be written. DO NOT WRITE ASSESSMENTS USING THIS AS GUIDANCE. This code is being rewritten as I write this. Pay no attention to this page until this message changes.>></font>

<wiki:toc />

At certain parts throughout the course, students take assessments to see how they're doing:

<img src="https://www.corp.google.com/~vpg/no_crawl/cb/assessment-zig.png" height=265 width=420 />

== What happens on an assessment page ==

An assessment is a graded test, typically covering material from several units and lessons. With our experimental code, you have control over how many graded assessments you provide and how each of those assessments counts in the final scoring for a studentâ€™s grade.

When students submit an assessment, the code determines how they did on the assessment and provides the feedback you specify. It also stores the student score for later retrieval.

== Page layout ==

This page consists of three areas:
  * The *header* is the same as for the home page. See [ModifyTemplate Modify Course Template] for information about this file.
  * The *content area* contains the questions and answer areas and a submit button.
  * The *footer* is the same as for the home page. See [ModifyTemplate Modify Course Template] for information about this file.

The app uses three files to render this page:
  * {{{views/base.html}}} defines the header and footer areas.
  * {{{views/assessment.html}}} defines the structure of the content area.
  * {{{assets/js/assessment-}}}_*{{SUFFIX}}}*_{{{.js}}} contains a !JavaScript array that fills in the actual question and answer areas for the assessment. Each assessment has its own file.

== Writing assessments ==

An assessment contains explanatory text and one or more questions for the student.

You define each assessment in its own !JavaScript file. The filenames have the form {{{assessment-}}}_*{{{SUFFIX}}}*_{{{.js}}}, where _*{{{SUFFIX}}}*_ is <font color=red><<TODO what? >></font>

The format of the file is
{{{
var assessment = {
  assessmentName: nameString,
  preamble: preambleString,
  disableCheckAnswers: Boolean,  // Optional
  questionsList: questionsArray
}
}}}

The file contains a single object named {{{assessment}}}. This object describes everything the code needs to know about an assessment. The attributes of the {{{assessment}}} object are as follows:

  * {{{assessmentName.}}} A string containing a unique name for this assessment. The code uses the assessment name <font color=red><<TODO somehow. Does it have anything to do with filenames? >></font> 
  * {{{preamble.}}} A string containing text and complete HTML elements. The preamble appears as the first thing on the assessment page.  See [#Preamble Preamble].
  * {{{disableCheckAnswers.}}} An optional Boolean. If false, then students can check their answers before submission. Defaults to {{{FALSE}}}. See [#Submitting_and_checking_answers Submitting and checking answers].
  * {{{questionsList.}}} An ordered array, each of whose elements describes a question in the assessment. The questions appear after the preamble. See [[#Question Questions]. 

=== Preamble ===

The value of the {{{preamble}}} attribute is a string that contains a set of complete HTML elements.  

That is, if the string contains an open HTML tag (such as {{{<em>}}}), it must also have the corresponding close tag (such as {{{</em>}}}).  

Also note that the entire string must be on a single line. If you want it to render as multiple lines, you must include the appropriate HTML markup.

The code simply renders the HTML you enter as the first thing on the assessment page. 

=== Submitting and checking answers ===

The bottom of an assessment page always includes a *Save Answers* button. When students submit an assessment by clicking on this button, they see a page such as the following:

https://www.corp.google.com/~vpg/no_crawl/cb/assessment-submit.png

By default, this page acknowledges that they submitted the assessment and gives them information about next steps. You can change the messages for different assessments by changing the file at {{{views/test_confirmation.html}}}.

Notice that this page does not tell students how they did on the assessment or give any feedback about what they might want to study some more. You can give students the option of checking their answers before submitting an assessment. If you set the {{{disableCheckAnswers}}} attribute of the {{{assessment}}} object to {{{FALSE}}}, then the assessment page has an additional *Check your Answers* button and an area for feedback, as shown here:

https://www.corp.google.com/~vpg/no_crawl/cb/assessment-check.png 

The feedback contains the student's score. If the student doesn't answer all questions correctly, the code displays which lessons the student should review to improve their score. How you specify this information is discussed in the next section.

=== Questions ===

The {{{questionsList}}} attribute is an ordered array of !JavaScript objects, each of which describes a question in the assessment.

Each question object has three attributes. Two of these are the same for all question types. Which third attribute you include determines what type of question this is.

The common attributes are:

  * {{{questionHTML.}}} A string containing text and complete HTML elements. This sring is the text to display for this question. As with a preamble string, if this string contains an open HTML tag (such as {{{<em>}}}), it must also have the corresponding close tag (such as {{{</em>}}}). Also note that the entire string must be on a single line. If you want it to render as multiple lines, you must include the appropriate HTML markup.

  * {{{lesson.}}} A string representing the lesson (or lessons) that cover the material this question is about. The app displays this string if the student incorrectly answers the question and has requested the app to [#Submitting_and_checking_answers check answers].

A question can be one of four types, depending on the third attribute:
|| *For this question type...* || *Supply a value for this attribute...*||
|| [#Multiple-choice_question A multiple-choice question] || {{{choices}} ||
|| [#Substring_match A case-insensitive subsring match] || {{{correctAnswerString}}} ||
|| [#Numeric_match A numeric match] ||  {{{correctAnswerNumeric}}}  ||
|| [#Free_text Free text] ||  {{{correctAnswerRegex}}}  ||

==== Multiple-choice question ====

==== Substring match ====
 A case-insensitive subsring match

==== Numeric match ====
A numeric match

==== Free text ====

<font color=red><<TODO *REALLY IGNORE THIS SECTION.* At present, it's the text for writing activities. I just thought I'd start from there and modify it for assessments. Until this message goes away, assume this section is complete gobbledygook.>></font>

The final type of answer is a free text area. Use this answer type when your question is somewhat open ended. Students type their answer into a text box of a size you specify. 

The code uses a [https://developer.mozilla.org/en-US/docs/JavaScript/Guide/Regular_Expressions regular expression] to verify the answer. Regular expressions can be notoriously difficult for a programmer to get right. For this reason, you need to be very careful with the wording of any question that takes a free text answer. Your regular expression needs to account for reasonable variations in student responses. The code for a simple free text answer looks as follows:

The final possibility for an entry in the {{{activity}}} array is a !JavaScript object that represents answer information. Depending on the answer type, this information can have several forms. The object contains properties such as the type of question, a [https://developer.mozilla.org/en-US/docs/JavaScript/Guide/Regular_Expressions regular expression] indicating the correct answer, or a string to show in case of either correct or incorrect answers or to show when the student asks for help.

== Testing changes ==

Changes you make to any file in the {{{views}}} directory or to any file in the {{{assets/js}}} directory appear automatically in your running development server.

That is, after you make a change to one of these HTML or JavaScript files, simply load (or reload) a page that uses that page and the change appears.