#summary Frequently asked questions

<h1>Frequently Asked Questions</h1>

<wiki:toc />

== Why does my course say Read-only course? ==
The root course you upload from your local computer to your live App Engine instance will always be read-only. The root course is located at the root  URL (at yourcourse.appspot.com vs. yourcourse.appspot.com/anothercourse). To edit that root course, you would make those edits like you originally did: on your local computer or development server and then push the changes to App Engine. The new courses you make through the browser on App Engine are editable through the browser. By default, those new courses are off root (yourcourse.appspot.com/anothercourse, yourcourse.appspot.com/anothercourse2, etc.). 

== How do I make my root course editable through the browser? ==
Even though you cannot make your root course editable through the browser, you can make a new course and import everything from the root course. Next, you would [URLMap re-route] (switch) your URLs. Here are the steps to clone your root course and route the clone course to the root URL:

  # In *Admin > Courses* create a [CreateNewCourse new course].
  # [Dashboard#Outline Import] your old (read-only) course into the new course you created.
  # In your new course, go to *Dashboard > Settings > Contents of course.yaml file* and click *Edit*.
  # Delete all the contents in the text box.
  # Copy all the contents of your {{{course.yaml}}} file that is now in your root course. Be careful of any extra spaces, which can cause an error.
  # Add this line in the {{{course}}} section: 
    {{{  
    now_available: False
    }}}
    Make sure you add the indentation (two spaces) before the specification. For example,
    {{{
    course:
      # Course title
      title: 'My New Example Course'
      
      # Course Availability
      now_available: False
    }}}
  # Click *Save*.
  # Go to *Admin > Settings > gcb_courses_config* and click *Edit*.
  # Make your new course the root URL and place your old course on the URL path that you specified when creating your new course:
    # In the final value ({{{course:/:/:}}})) delete the {{{/}}} entry from the location entry. Your new course will get its data from the datastore, not from the file system.
    # Add the datastore namespace of your new course. For example, if you specified {{{aux}}} as your Unique Name when you created your new course, your {{{gcb_courses_config}}} values will look like:   
    {{{
    course:/aux:/:
    course:/::ns_aux
    }}}
    # Click *Save*. The page itself shows how to interpret and specify the {{{gcb_courses_config}}} values.

== What is a shell or command prompt? ==

In several places, you're asked to open a "shell or command prompt" and then enter some arcane command.

Every operating system has a utility you can use that lets you type in text-based "commands" for some arbitrary piece of software. Each operating system calls this utility something different.

  * *Windows* calls it a *Command Prompt*.<br><br>Choose *Start > Command Prompt*. If Command Prompt does not appear on the *Start* menu, then instead choose *Start > All Programs > Accessories > Command Prompt*.
  
  http://wiki.course-builder.googlecode.com/git/images/windows_prompt.PNG

  * *Mac* calls it either a *terminal* or a *shell*.<br><br>Open the *Finder*. Choose *Go > Utilities*. From the window that appears, choose *Terminal.app*.
  
  http://wiki.course-builder.googlecode.com/git/images/mac_terminal.png

  * *Linux* and other *POSIX-compliant systems* call it a *shell*. 

== How do CSV files work? ==

Course Builder gets lesson and unit data for your course from CSV files. [http://en.wikipedia.org/wiki/Comma-separated_values CSV (comma-separated value)] is a simple format for storing lines of data. Actually, CSV files can differ. As used by Course Buidler:

  * Each line represents one set of related data (think of a row in a table).

  * The pieces of data on a single line are separated by commas.

  * The  first line in the CSV file is special. It indicates what information is on each line and in what order. For example, the first line of the {{{data/unit.csv}}} file is:<br> {{{id,type,unit_id,title,release_date,now_available}}}<br>This says that each subsequent line has those six pieces of information in the specified order.

  * *The tricky part:* If one of the pieces of data on a line contains a comma, that entire piece of data needs to be surrounded by double quotes. For example, if you want to have a unit whose title is *All about cats, dogs, and mice*, then the line in {{{data/unit.csv}}} might look as follows:<br> {{{6,U,3,"All about cats, dogs, and mice",available July 12,True}}} 