#summary Describes course data and how to export your course data.

<h1>Export Course Data</h1>

== Introduction ==

This page describes the student assessment and course data stored by Course Builder and how to export your data into text files in [http://en.wikipedia.org/wiki/Comma-separated_values CSV] format. We’ll start with an overview of the Course Builder data, followed by the steps for exporting the data. Before getting started, make sure you’ve downloaded and installed the Python App Engine SDK and that you have Python 2.7 on your system. (For information on downloading and installing the Python App Engine SDK, see [AppEngine Develop with App Engine].)

== Course Builder data overview ==

The following table describes the data Course Builder stores for your course. Course Builder stores three  kinds of data: Student, Unit, and Lesson. 

*Student* - Data on the student’s work on the class.
|| *Name* || *Type* || *Description* ||
|| {{{midterm_score}}} || INTEGER || The student’s midterm score. A numeric value or empty for no score. || 
|| {{{final_answer}}} || TEXT || The selection of answers for each of the final exam questions. It is stored as a 2 dimensional array of strings. || 
|| {{{enrolled_date}}} || DATETIME || The date and timestamp when student enrolled in the class. || 
|| {{{final_score}}} || INTEGER || The student’s final score. A numeric value or empty for no score. || 
|| {{{precourse_answer}}} ||  TEXT || The selection of answers for each of the precourse survey questions. It is stored as a 2-dimensional array of strings. || 
|| {{{overall_score}}} || INTEGER || The student’s overall score. A numeric value or empty for no score. || 
|| {{{midterm_answer}}} || TEXT || The selection of answers for each of the midclass exam questions. It is a 2-dimensional array of strings. || 
|| {{{cert_name}}} || STRING || The name as it will appear on the certificate. || 

*Unit* - Data on the units offered in the course.
|| *Name* || *Type* || *Description* ||
|| {{{id}}} || INTEGER || An integer representing this unit. || 
|| {{{type}}} || STRING || The type of unit being offered. A string value containing the type ‘A’, ‘U’ or ‘O’ for assessment, Unit or Other. || 
|| {{{unit_id}}} || STRING || A string id for this unit. Its value depends on if this item is assessment, unit or something else. || 
|| {{{title}}} || STRING || A string value containing the title of the unit. || 
|| {{{release_date}}} || STRING || The date when this unit will be made available. A string value containing the date. || 
|| {{{now_available}}} || STRING || A Boolean value of True or False representing whether or no students can access this unit. || 

*Lesson* - Data on the lessons offered in each unit.
|| *Name* || *Type* || *Description* ||
|| {{{unit_id}}} || INTEGER || An integer indicating which unit this lesson is part of. || 
|| {{{id}}} || INTEGER || An integer indicating which lesson this is. Lessons in each unit start with 1 and go in order. || 
|| {{{title}}} || STRING || A string value representing the name of the lesson. || 
|| {{{objectives}}} || TEXT || A string containing lesson objectives, that appears after the title of the lesson. || 
|| {{{video}}} || TEXT	 || The id of the YouTube video associated with the lesson. || 
|| {{{notes}}} || TEXT || URL of the text version of the lesson. || 
|| {{{activity}}} || STRING || A string value of Yes or No representing whether there is an activity associated with this lesson. || 
|| {{{activity_title}}} || STRING || The title of the activity. || 

== Export your class data ==

The Course Builder application stores data in App Engine’s [https://developers.google.com/appengine/docs/python/datastore/structuring_for_strong_consistency High Replication datastore]. You download course data using the App Engine bulk loader tool, which is included with the Python App Engine SDK for your platform. (For information on downloading and installing the Python App Engine SDK, see [AppEngine Develop with App Engine].) We’ll use CSV format for this example so you can upload data into a spreadsheet or into Fusion Tables for viewing and analysis.

Follow these steps to export Course Builder data.

 # Create a new directory that will hold your exported data files.
 # Create a new configuration file called {{{bulkloader.yaml}}}, copy the following information into the file, and save the file.
{{{
# Autogenerated bulkloader.yaml file.
# You must edit this file before using it. TODO: Remove this line when done.
# At a minimum address the items marked with TODO:
#  * Fill in connector and connector_options
#  * Review the property_map.
#    - Ensure the 'external_name' matches the name of your CSV column,
#      XML tag, etc.
#    - Check that __key__ property is what you want. Its value will become
#      the key name on import, and on export the value will be the Key
#      object.  If you would like automatic key generation on import and
#      omitting the key on export, you can remove the entire __key__
#      property from the property map.

# If you have module(s) with your model classes, add them here. Also
# change the kind properties to model_class.
python_preamble:
- import: base64
- import: re
- import: google.appengine.ext.bulkload.transform
- import: google.appengine.ext.bulkload.bulkloader_wizard
- import: google.appengine.ext.db
- import: google.appengine.api.datastore
- import: google.appengine.api.users

transformers:
- kind: Unit
  connector: csv
  property_map:
    - property: id
      external_name: unit_id
      import_transform: int
    - property: title
      external_name: unit_title
    - property: release_date
      external_name: release_date
    - property: now_available
      external_name: now_available
- kind: Lesson
  connector: csv
  property_map:
    - property: unit_id
      external_name: unit_id
      import_transform: int
    - property: id
      external_name: lesson_id
      import_transform: int
    - property: title
      external_name: lesson_title
    - property: activity
      external_name: lesson_activity
    - property: activity_title
      external_name: lesson_activity_name
    - property: video
      external_name: lesson_video_id
    - property: slide
      external_name: lesson_slide_url
    - property: objectives
      external_name: lesson_objectives
    - property: notes
      external_name: lesson_notes
    - property: duration
      external_name: lesson_times
- kind: Student
  connector: csv
  property_map:
    - property: __key__
      external_name: email
      export_transform: datastore.Key.name
}}}

 # Create an application-specific password for your class (save/remember the password). For help, see [http://support.google.com/accounts/bin/answer.py?hl=en&answer=185833 Signing in using application-specific passwords].
 # Open the your platforms terminal application, change to your data directory, and run the following command with the appropriate parameters (see examples below); type your application-specific password at the prompt. 
{{{
# email = Your Google email address.
# config_file = The bulkloader.yaml file, with the relative location from the current directory.
# filename = The name of your exported data file.
# kind = The name of the model to export.
# url = The URL for the server, followed with /remote_api. 
#
# Example commands for exporting all data.
# $ appcfg.py download_data --email=molson@google.com --config_file=bulkloader.yaml --filename=student.csv --kind=Student --url=http://myclass.google.com/remote_api
# $ appcfg.py download_data --email=molson@google.com --config_file=bulkloader.yaml --filename=unit.csv --kind=Unit --url=http://myclass.google.com/remote_api
# $ appcfg.py download_data --email=molson@google.com --config_file=bulkloader.yaml --filename=lesson.csv --kind=Lesson --url=http://myclass.google.com/remote_api

$ appcfg.py download_data --email=<email> --config_file=<config-file> --filename=<data_filename> --kind=<what to export> --url=<url>
}}}

The command will generate the following files:

|| *File* || *Description* ||
|| {{{bulkloader-log-<timestamp>}}} || A log file showing the processing steps. Use the {{{--db_filename=skip}}} flag to skip generating this file.|| 
|| {{{bulkloader-progress-<timestamp>.sql3}}} || A SQL3 database file showing progress. Use the {{{--db_filename=skip}}} flag to skip generating this file. || 
|| {{{bulkloader-results-<timestamp>.sql3}}} || The exported class data in SQL3 format. Use the {{{--db_filename=skip}}} flag to skip generating this file. || 
|| {{{<filename>.csv}}} || The exported class data in CSV format. || 

You can now import your CSV files into a spreadsheet or into [http://www.google.com/fusiontables Fusion Tables] for viewing and analysis. For help importing data into Fusion Tables, see [http://support.google.com/fusiontables/bin/answer.py?hl=en&answer=181717&topic=27017&ctx=topic Import data].